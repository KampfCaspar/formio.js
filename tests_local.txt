Unknown plugin option jsonLogic


  ✔ Should be collapsed
  ✔ Should open when an Error occured (46ms)
  Formio.js CDN class Tests
    ✔ Should give correct CDN URLs
    ✔ Should update lib versions
    ✔ Shoudl override CDN urls
    ✔ Should remove overrides

  Component
    ✔ Should create a Component
    ✔ Should build a base component
    ✔ Should provide required validation (210ms)
    ✔ Should provide minLength validation (209ms)
    ✔ Should provide maxLength validation (211ms)
    ✔ Should provide maxWords validation (211ms)
    ✔ Should provide minWords validation (210ms)
    ✔ Should provide custom validation (212ms)
    ✔ Should provide json validation (210ms)
    ✔ Should mark as invalid calculated fields that are invalid (631ms)
    ✔ Should return value for HTML mode
    ✔ Should protect against change loops (522ms)
    ✔ Should mark as invalid only invalid fields in multiple components (325ms)
    ✔ Should sanitize HTML even if options.pdf is set
    ✔ Should not execute code inside Tooltips/Description (214ms)
    shouldSkipValidation
      ✔ should return true if component is hidden
      ✔ should return true if component is conditionally hidden
      ✔ should return false if not hidden
    Component Modal
      ✔ Modal window should stay opened after redrawing component if it was opened ont hte moment of calling
    shouldDisplayRedAsterisk
      ✔ modalPreview template should have className "field-required" if component is required

  NestedComponent class
    ✔ Should create a new NestedComponent class
    ✔ Should be able to add new components
    ✔ Should be able to set data within the components.
    ✔ Should create nested visibility elements.
    set/get visible
      ✔ should set/get visible flag on instance and child components
    set/get parentVisible
      ✔ should set/get parentVisible flag on instance and child components
    get schema
      ✔ components array shouldn't have duplicates
    calculateComponentPath
      ✔ the first layer components
      ✔ inside data components (274ms)
      ✔ inside nested forms (49ms)
    getComponent
      ✔ the first layer components
      ✔ inside data components (267ms)
      ✔ inside nested forms (42ms)
    render value as String
      ✔ Should render a Select's value template (541ms)

  NestedArrayComponent class
    ✔ Should create a new NestedArrayComponent class

  NestedDataComponent class
    ✔ Should create a new NestedDataComponent class

  Address Component
    ✔ Should build an address component
    ✔ Should set default value and clear it on "clear icon" click (openStreetMap provider) (308ms)
    ✔ Should disable "clear icon"
    ✔ Test manual mode (629ms)
    ✔ Should close modal window without showing dialog if value not changed (844ms)
    ✔ Should correctly display component that has a conditional based on the Address component (926ms)

  Button Component
    ✔ Should build a button component
    ✔ POST to URL button should pass URL and headers
Text Content:  Please check the form and correct all errors before submitting.
    ✔ Test on error (212ms)
    ✔ POST to URL button should perform URL interpolation
    ✔ POST to URL button should perform headers interpolation
    ✔ Should not change color and show message if the error is silent (107ms)
    ✔ Should reset values of all the form's components and update properties dependent on values (628ms)
    ✔ Should perform custom logic (220ms)
    ✔ Should correctly set theme
    ✔ Should render block btn
    ✔ Test event, reset, post, save in state actions (1223ms)

  Checkbox Component
    ✔ Should build a checkbox component
    ✔ Span should have correct text label
    ✔ Should be able to set and get data
    ✔ Should be able to set custom default value
    ✔ Should be able to unselect a checkbox component with the radio input type
    ✔ Should render red asterisk for preview template of the modal required checkbox 
    ✔ Should hide component with conditional logic when checkbox component with the radio input type is unchecked (613ms)

  Columns Component
    ✔ Should build a columns component
    ✔ Should be auto-adjusting when auto adjust is set to true
    ✔ Should clear fields in modal window after confirming to clear data in dialog window (534ms)

  Container Component
    ✔ Should build a container component
    ✔ Should be able to set and get data
    ✔ Should set the dataValue, but after it sets the value of its nested components
    ✔ Should render form with a submission in a draft-state without validation errors (113ms)
    ✔ Should not set the default value when clearOnHide during the server-side validation (216ms)

  Content Component
    ✔ Should build a content component
    ✔ Should update after submission set

  Currency Component
    ✔ Should build a currency component
    ✔ Should place a caret between the period and the underline. (204ms)
    ✔ Should format value on blur for USA locale
    ✔ Should format value on blur for French locale
    ✔ Should not change entered value on blur if multiple value is set
    ✔ Should format currency submissions for table view for French locale
    ✔ Should format currency sumbissions for table view for USA locale
    ✔ Should add trailing zeros
    ✔ Should set values with trailing zeros
    ✔ Should format currency for USA locale
    ✔ Should format currency for British locale
    ✔ Should format currency for French locale
    ✔ Should format currency for German locale
    ✔ Should return value as string properly for multiple values

  DataGrid Component
    ✔ Test modal edit confirmation dialog (242ms)
    ✔ Should show alert message in modal edit, when clicking on modal overlay and value was changed,
    and clear values when pushing 'yes, delete it' in alert container (1298ms)
    ✔ Should build a data grid component
    ✔ Should build a data grid component with formio-component-datagrid class property (265ms)
    ✔ Should not skip validation on input nested components
    ✔ Should get and set values within the grid.
    ✔ Should be able to add another row.
    ✔ Should allow provide default value
    ✔ Should allow provide default value in row-groups model
    ✔ Should not cause setValue loops when logic within hidden component is set (1531ms)
    ✔ Should collapse group rows on group header click (343ms)
    ✔ Test "components" property and their context (1255ms)
    get minLength
      ✔ should return minimal number of required rows
    getGroupSizes
      ✔ should return array of numbers representing group sizes

  DataGrid Panels
    ✔ Should build a data grid component
    ✔ Should be able to set the values of one panel in the DataGrid.
    ✔ Should have unique IDs inside data grid
    ✔ Should hide label in header for Button component when hideLabel is true.

  DataGrid disabling
    ✔ Child components should be disabled

  DataGrid modal
    ✔ Should be highlighted in red when invalid (435ms)

  DataGrid calculated values
    ✔ Should allow override calculated value (921ms)
    ✔ Should not recalculate value after restoring to previous calculated value (1228ms)
    ✔ Should calculate value for several DataGrid components (926ms)

  DataMap Component
    ✔ Should build a data map component
    ✔ Should get and set values within the datamap.
    ✔ Should render data from submission properly when the Data Map is inside conditionally shown layout component (311ms)

  DateTime Component
    ✔ Should build a date time component
    ✔ Test formatting (263ms)
    ✔ Should format value
    ✔ Should not change manually entered value on blur when time is disabled (624ms)
    ✔ Should allow manual input (326ms)
    ✔ Should allow manual input for date with full month format (like MMMM) (332ms)
    ✔ Should not allow manual input (326ms)
    ✔ Should format date correctly (1153ms)
    ✔ Should disable weekends
    ✔ Should disable weekdays
    ✔ Should disable time
    ✔ Should disable date
    ✔ Should enable time
    ✔ Should enable date
    ✔ Should not input the date that is disabled (319ms)
    ✔ Should not input the date that is in disabled range (324ms)
    ✔ Should not allow inputting the date that meets condition of "custom disabled date" (333ms)
    ✔ Should not allow inputting the date if it is out of min/max date range (642ms)
    ✔ Should set hour and minutes step
    ✔ Should allow inputting 24h time (320ms)
    ✔ Should not set value if it does not meet minDate validation (336ms)
    ✔ Should set value in readOnly mode even if it does not meet current minDate validation conditions (331ms)
    ✔ Should save hours and minutes values on first change (423ms)
    ✔ Should provide correct value after submission (428ms)
    ✔ Should not highlight the field when it is valid when multiple values and required validation are enabled (657ms)
    ✔ Should provide correct values with time after submission (439ms)
    ✔ Should add date to format if enableDate is true
    ✔ Should add time to format if enableTime is true

  Day Component
    ✔ Should build a day component
    ✔ Should change the max day when the month changes
    ✔ Should put the month select first
    ✔ Should put the day select first on configuration
    ✔ Should not allow invalid days (108ms)
    ✔ Should ignore invalid months and use zeros as default
    ✔ Should keep day value when switching months (107ms)
    ✔ Should adjust day value when day is great then maxDay of month (110ms)
    ✔ Should validate required fields
    ✔ Should properly validate min-max dates when dayFirst is checked
    ✔ Should disable day component if parent component is disabled
    ✔ Should use the default day value if the day field is hidden
    ✔ Should use the default month value if the month field is hidden
    ✔ Should use the default year value if the year field is hidden
    ✔ OnBlur validation should work properly with Day component (612ms)
HTMLSelectElement {} HTMLSelectElement {}
    ✔ Should restore focus after redraw (738ms)

  EditGrid Component
    ✔ Should set correct values in dataMap inside editGrid and allow aditing them (729ms)
    ✔ Should set correct values after reset (319ms)
    ✔ Should display saved values if there are more then 1 nested components (621ms)
    ✔ Should build an empty edit grid component
    ✔ Should build an edit grid component
    ✔ Should add a row when add another is clicked
    ✔ Should save a new row when save is clicked
    ✔ Should cancel add a row when cancel is clicked
    ✔ Should delete a row when delete is clicked
    ✔ Should edit a row when edit is clicked
    ✔ Should save a row when save is clicked
    ✔ Should cancel edit row when cancel is clicked
    ✔ Should show error messages for existing data in rows
    ✔ Should not allow saving when errors exist
    ✔ Should not allow saving when rows are open
    ✔ Should disable components when in read only
    ✔ Test simple conditions based on the EditGrid's child's value and default values when adding rows (268ms)
    ✔ Test clearOnHide inside EditGrid (340ms)
    ✔ Test refreshing inside EditGrid (445ms)
    ✔ Should display summary with values only for components that are visible at least in one row (1272ms)
    ✔ Should add component to the header only if it is visible in saved row (1276ms)
    ✔ Should add/save/cancel/delete/edit rows (1469ms)
    ✔ Should open first row when empty and allow saving openned row (224ms)
    ✔ Should disable adding/removing rows (223ms)
    ✔ Should show conditional eddRow btn if condition is met (421ms)
    ✔ Should use custom text for save/cancel/add btns (427ms)
    ✔ Should render headers when openWhenEmpry is enabled
    ✔ Should show validation when saving a row with required conditional filed inside container (772ms)
    ✔ Should render form with a submission in a draft-state without validation errors (117ms)
    ✔ Should keep value for conditional editGrid on setValue when server option is provided (512ms)
    ✔ Should set value for conditional editGrid inside editGrid on event when form is not pristine  (844ms)
    ✔ Should keep value for conditional editGrid in tabs on setValue when server option is provided (529ms)
    ✔ Should calculate editGrid value when calculateOnServer is enabled and server option is passed
    ✔ Should keep value for conditional editGrid deeply nested in panels and containers on setValue when server option is provided (516ms)
    ✔ Should calculate editGrid value when condition is met in advanced logic (321ms)
    Display As Modal
      ✔ Should show add error classes to invalid components (292ms)
      ✔ Should set alert with validation errors on save and update them (687ms)
      ✔ Confirmation dialog (782ms)
      ✔ Confirmation dialog shouldn't occure if no values within the row are changed (175ms)
      ✔ Should not produce many components in Edit view when minLength validation set (215ms)
      ✔ Should close row when Display as Modal checked (247ms)
    Draft Rows
      ✔ Check saving rows as draft
      ✔ Should not show row errors alerts if drafts enabled in modal-edit EditGrid (686ms)
      ✔ Should keep fields valid inside NestedForms if drafts are enabled (1004ms)
[
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      modal: true,
      validate: [Object],
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      rowDrafts: true,
      id: 'el1rj59',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Please correct invalid rows before proceeding.',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Text Field',
      tableView: true,
      validate: [Object],
      key: 'textField',
      type: 'textfield',
      input: true,
      id: 'es9qirg',
      shouldIncludeSubFormPath: true,
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid[0].form.data.textField'
  },
  {
    component: {
      label: 'Text Field 2',
      tableView: true,
      validate: [Object],
      key: 'textField2',
      type: 'textfield',
      input: true,
      id: 'ejv42z',
      shouldIncludeSubFormPath: true,
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field 2 is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid[0].form.data.textField2'
  }
]
      ✔ Should keep fields valid inside NestedForms if drafts are enabled (2588ms)

  EditGrid Open when Empty
    ✔ Should be opened when shown conditionally (1533ms)
    ✔ Should create new row with empty data and no defaults (314ms)
    ✔ Should always add a first row (1304ms)
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
{
  fundClass: 'Class1',
  fundName2: 'Name1',
  loadTypeFundCode: 'dsc602',
  allocationAmount2: 100
}
{
  fundClass: 'Class2',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 200
}
{
  fundClass: 'Class3',
  fundName2: 'Name2',
  loadTypeFundCode: 'll1202',
  allocationAmount2: 100
}
    ✔ Should restore focus on the proper component after change event (718ms)
    ✔ Should submit form with empty rows when submit button is pressed and no rows are saved (566ms)
[
  {
    component: {
      label: 'Edit Grid',
      openWhenEmpty: true,
      tableView: false,
      rowDrafts: false,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      id: 'e3kqbo',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      modal: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Please correct invalid rows before proceeding.',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Text Field',
      applyMaskOn: 'change',
      tableView: true,
      validate: [Object],
      key: 'textField',
      type: 'textfield',
      input: true,
      row: '0-0',
      id: 'erq8h0r',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid[0].textField'
  }
]
    ✔ Should not submit form if any row inputs are set as required (583ms)

  Email Component
    ✔ Should build a email component
    ✔ Should provide min/max length validation (334ms)
    ✔ Should provide pattern validation (341ms)
    ✔ Should provide email validation (420ms)

  Fieldset Component
    ✔ Should build a fieldset component

  File Component
    ✔ Should create a File Component
    ✔ Should hide loader after loading process
    ✔ Should create a multiple File Component
    ✔ Should validate uploaded file according to the pattern
    ✔ Should display uploaded file in file component only after saving (1046ms)
    ✔ Should abort the correct file when user clicks the file remove button (136ms)

  Form Component
    ✔ Should build a form component
    ✔ Test refreshOn inside NestedForm (920ms)
    Value inside Nested Form
      ✔ Should be able to set value to Nested Form Component and check result in the email template
    renderSubForm
      ✔ should set sub form parentVisible
    set visible
      ✔ should set visible flag on instance
      ✔ should update sub form visibility
    get visible
      ✔ should get visible flag from instance
    set parentVisible
      ✔ should set parentVisible flag on instance
      ✔ should update sub form visibility
    get parentVisible
      ✔ should get parentVisible flag from instance
    Modal Edit
      ✔ Should render preview when modalEdit
    Conditional rendering
      ✔ Should render and set submission to conditional form component (260ms)
    Advanced Logic
      ✔ Should disable all components of the form (321ms)
    Inside Collapsed Panel
      ✔ Should be able to set value to Nested Form Component inside collapsed Panel (623ms)

  Wizard Component
    ✔ Should build a wizard component and disable cancel, next and breadcrumbs

  Hidden Component
    ✔ Should build a hidden component

  HTML Component
    ✔ Should build an html component
    ✔ Should build an html component and ignore empty attribute name
    ✔ setContent should not be called if it is not conditionally visible

  Number Component
    ✔ Should build an number component
    ✔ Should format submissions for table view for French locale
    ✔ Should format sumbissions for table view for USA locale
    ✔ Should format value on blur for USA locale
    ✔ Should format value on blur for French locale
    ✔ Should not change entered value on blur if multiple value is set
    ✔ Should limit decimals using step
    ✔ Should format submissions for table view for French locale
    ✔ Should format sumissions for table view for USA locale
    ✔ Should format numbers for USA locale
    ✔ Should format numbers for British locale
    ✔ Should format numbers for French locale
    ✔ Should format numbers for German locale
    ✔ Should display default integer value
    ✔ Should display default decimal value
    ✔ Should provide min/max validation (360ms)
    ✔ Should be able to switch between multiple and single values
    ✔ Should return value as string properly for multiple values

  Panel Component
    ✔ Should build a panel component
    ✔ Should keep validation errors after expanding collapsed panel (933ms)
    Edit Form
      ✔ should include components for important settings

  Password Component
    ✔ Should build a password component
    ✔ Should provide min/max length validation (371ms)
    ✔ Should provide pattern validation (348ms)

  PhoneNumber Component
    ✔ Should build a phone number component
    ✔ Should check mask and value in the phone component in the email template (312ms)

  Radio Component
    ✔ Should build a radio component
    ✔ Should return correct string values if storage type is Number
    ✔ Should build a radio component with URL DataSrc (206ms)
    ✔ Should provide metadata.selectData for radio component with URL DataSrc (617ms)
    ✔ Should save checked value after redrawing if storage type is Number (710ms)
    ✔ Should set correct data for 0s values (419ms)
    ✔ Span should have correct text label
    ✔ Should set false as defaultValue correctly
[
  {
    component: {
      label: 'Radio',
      optionsLabelPosition: 'right',
      inline: true,
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'radio',
      type: 'radio',
      input: true,
      id: 'eh7bwti',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      inputType: 'radio',
      data: [Object],
      fieldSet: false
    },
    message: 'Radio is an invalid value.',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'radio'
  }
]
    ✔ Should provide "Allow only available values" validation (812ms)
    ✔ Should use whole Object as value if URL DataSrc and ValueProperty is not set (817ms)
    ✔ Should not have default values in schema

  Radio Component
    ✔ should have red asterisk left hand side to the options labels if component is required and label is hidden
    ✔ Should not provide empty error message when hidden radio has storage type as string (124ms)
    ✔ Should show correct attributes during performance (419ms)

  reCAPTCHA Component
    ✔ Should build a reCAPTCHA component in builder mode

  Select Component
    ✔ should not stringify select option value (311ms)
    ✔ should return string value for different value types
    ✔ Should return plain text when csv option is provided
    ✔ should correctly determine storage type when dataType is auto
    ✔ should not stringify default empty values
    ✔ should not change value letter case
    ✔ should define boolean value
    ✔ 1/2 should not display empty choice options if property value is not defined
    ✔ 2/2 should display choice option if property value is set
    ✔ should have only unique dropdown options
    ✔ should format unlisted values
    ✔ should set multiple selected values not repeating them
    ✔ should not show selected values in dropdown when searching
    ✔ Should build a Select component
    ✔ Should preserve the tabindex
    ✔ Should default to 0 when tabindex is not specified
    ✔ Should allow to override threshold option of fuzzy search
    ✔ should set component value
    ✔ should remove selected item
    ✔ should open dropdown after item has been removed
    ✔ should keep dropdown closed after item has been removed by keypress
    ✔ Should render and set values in selects with different widget types (414ms)
    ✔ Should clear select value when "clear value on refresh options" and "refresh options on" is enable and number component is changed    (619ms)
    ✔ Should update select items when "refresh options on" is enable and number component is changed (715ms)
    ✔ Should update select items when "refresh options on blur" is enable and number component is changed (719ms)
    ✔ Should be able to search if static search is enable (628ms)
    ✔ Should not be able to search if static search is disable
    ✔ Should save correct value if value property and item template property are different (613ms)
    ✔ Should set custom header when sending request in select url (220ms)
    ✔ Should set value in select url with lazy load option (218ms)
    ✔ Should set value in select url with lazy load option when value property is defined (217ms)
    ✔ Should be able to search if static search is enable (622ms)
    ✔ Server side search is debounced with the correct timeout (267ms)
[
  {
    component: {
      label: 'Select',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'select',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'e88upy',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Select is an invalid value.',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'select'
  }
]
    ✔ Should provide "Allow only available values" validation (612ms)
    ✔ Should render and set value in select json (613ms)
    ✔ Should load and set items in select resource and set value (615ms)
    ✔ Should not have "limit" and "skip" query params when "Disable limit" option checked (216ms)
    ✔ The empty option in html5 shouldn't have the [Object Object] value
    ✔ Should not have default values in schema
    ✔ Should show async custom values and be able to set submission (610ms)
    ✔ Should provide metadata.selectData for Select component pointed to a resource where value property is set to a field (419ms)
    ✔ Should provide correct metadata.selectData for multiple Select (414ms)
    ✔ Should provide correct metadata.selectData for HTML5 Select (725ms)
    ✔ OnBlur validation should work properly with Select component (712ms)
    ✔ Should escape special characters in regex search field (717ms)

  Select Component
    ✔ Select Component should work correctly with the values in the form of an array (421ms)

  Select Component with Entire Object Value Property
    ✔ Should provide correct value (416ms)
    ✔ Should provide correct items for Resource DataSrc Type and Entire Object Value Property (420ms)
    ✔ Should provide correct html value for Resource DataSrc Type and Entire Object Value Property (422ms)
    ✔ Should set submission value for Resource DataSrc Type and Entire Object Value Property (1017ms)
    ✔ Should get string representation of value for Resource DataSrc Type and Entire Object Value Property

  SelectBoxes Component
    ✔ Should build a SelectBoxes component
    ✔ Should build a SelectBoxes component with URL DataSrc (206ms)
    ✔ Should display values in DataTab
    ✔ Should provide metadata.selectData for SelectBoxes component with URL DataSrc (611ms)
    ✔ Should set "checked" attribute correctly when value is changed (440ms)
    error messages
      ✔ Should have a minSelectedCount validation message
      ✔ Should use the minSelectedCountMessage if provided
      ✔ Hidden SelectBoxes validation should not prevent submission (508ms)
      ✔ Should have a maxSelectedCount validation message
      ✔ Should use the maxSelectedCountMessage if provided
[
  {
    component: {
      label: 'Select Boxes',
      dataSrc: 'url',
      data: [Object],
      valueProperty: 'abbreviation',
      template: '<span>{{ item.name }}</span>',
      key: 'selectBoxes',
      type: 'selectboxes',
      input: true,
      inputType: 'checkbox',
      id: 'ek3005n',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      tableView: false,
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      authenticate: false,
      ignoreCache: false,
      values: [Array],
      fieldSet: false,
      inline: false
    },
    message: 'Invalid Value Property',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectBoxes'
  }
]
      ✔ Should provide validation for ValueProperty (1113ms)

  SelectBoxes Component
    ✔ should have red asterisk left hand side to the options labels if component is required and label is hidden
    ✔ Should perform OnlyAvailableItems check properly

  Survey Component
    ✔ Should build a survey component
    ✔ Should set the value of surveys.
    ✔ Should require all questions for required Survey (105ms)

  Table Component
    ✔ Should build a Table component

  Tabs Component
    ✔ Test setting error classes when set to modalEdit (464ms)

  Tags Component
    ✔ Should build a tags component
    ✔ Should set placeholder
    ✔ Should not allow to add non-unique tags on blur
    ✔ Should not exceed maxTags limit (408ms)
    ✔ Check getValueAsString (280ms)
    ✔ Should use correct delimiter for value (215ms)
    ✔ Should use store value as array (222ms)
    ✔ Should show the specified delimiter when get value as string (222ms)
    ✔ OnBlur validation should work properly with Tags component (823ms)

  TextArea Component
    ✔ Should build a TextArea component
    ✔ setValue should be called only once
    ✔ Should provide min/max length validation (391ms)
    ✔ Should provide min/max words validation (384ms)
    ✔ Should provide pattern validation (343ms)
    ✔ Should set custom number of rows
    ✔ Should render HTML (309ms)
    ✔ Should render plain text (308ms)
    ✔ Should correctly count characters if character counter is enabled (613ms)
    ✔ Should correctly count words if word counter is enabled (620ms)
    Rich text editors
[
  <ref *1> Editor {
    '$toDestroy': [
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener], [EventListener], [EventListener],
      [EventListener]
    ],
    container: HTMLDivElement { env: [Object], value: 'Test' },
    renderer: VirtualRenderer {
      container: [HTMLDivElement],
      '$themeId': 'ace/theme/xcode',
      _eventRegistry: [Object],
      _defaultHandlers: {},
      '$theme': 'ace-tm',
      theme: [Object],
      '$gutter': HTMLDivElement {},
      scroller: [HTMLDivElement],
      content: HTMLDivElement {},
      '$gutterLayer': [Gutter],
      '$markerBack': [Marker],
      '$textLayer': [Text],
      canvas: [HTMLDivElement],
      '$markerFront': [Marker],
      '$cursorLayer': [Cursor],
      '$horizScroll': false,
      '$vScroll': false,
      '$scrollbarWidth': 0,
      scrollBarV: [VScrollBar],
      scrollBar: [VScrollBar],
      scrollBarH: [HScrollBar],
      scrollTop: 0,
      scrollLeft: 0,
      cursorPos: [Object],
      '$fontMetrics': [FontMetrics],
      '$size': [Object],
      layerConfig: [Object],
      scrollMargin: [Object],
      margin: [Object],
      '$keepTextAreaAtCursor': true,
      '$loop': [RenderLoop],
      characterWidth: 0,
      lineHeight: 0,
      '$printMarginEl': [HTMLDivElement],
      '$padding': 4,
      textarea: [HTMLTextAreaElement],
      session: [EditSession],
      onChangeNewLineMode: [Function: bound ],
      '$maxLines': 12,
      '$minLines': 12,
      placeholderNode: HTMLDivElement {},
      '$changes': 1975,
      '$changedLines': [Object]
    },
    id: 'editor2',
    commands: CommandManager {
      platform: 'win',
      commands: [Object],
      commandKeyBinding: [Object],
      '$singleCommand': false,
      byName: [Object],
      _defaultHandlers: [Object],
      _eventRegistry: [Object]
    },
    _eventRegistry: {
      beforeEndOperation: [Array],
      changeSession: [Array],
      input: [Array],
      mousedown: [Array],
      mousemove: [Array],
      click: [Array],
      gutterclick: [Array],
      gutterdblclick: [Array],
      change: [Array],
      changeSelection: [Array],
      destroy: [Array]
    },
    textInput: TextInput {
      setAriaOptions: [Function (anonymous)],
      setAriaLabel: [Function (anonymous)],
      '$focusScroll': false,
      focus: [Function (anonymous)],
      blur: [Function (anonymous)],
      isFocused: [Function (anonymous)],
      resetSelection: [Function (anonymous)],
      setInputHandler: [Function (anonymous)],
      getInputHandler: [Function (anonymous)],
      getElement: [Function (anonymous)],
      setCommandMode: [Function (anonymous)],
      setReadOnly: [Function (anonymous)],
      setCopyWithEmptySelection: [Function (anonymous)],
      onContextMenu: [Function (anonymous)],
      moveToMouse: [Function (anonymous)],
      onContextMenuClose: [Function: onContextMenuClose],
      destroy: [Function (anonymous)]
    },
    _defaultHandlers: {
      _disabled_: {},
      mousedown: [Function: bound ],
      dblclick: [Function: bound ],
      tripleclick: [Function: bound ],
      quadclick: [Function: bound ],
      mousewheel: [Function: bound ],
      guttermousedown: [Function (anonymous)],
      guttermousemove: [Function (anonymous)],
      change: undefined
    },
    '$mouseHandler': MouseHandler {
      editor: [Circular *1],
      '$clickSelection': null,
      select: [Function (anonymous)],
      startSelect: [Function (anonymous)],
      selectEnd: [Function (anonymous)],
      selectAllEnd: [Function (anonymous)],
      selectByWordsEnd: [Function (anonymous)],
      selectByLinesEnd: [Function (anonymous)],
      dragWait: [Function (anonymous)],
      dragWaitEnd: [Function (anonymous)],
      focusWait: [Function (anonymous)],
      selectByLines: [Function: bound ],
      selectByWords: [Function: bound ],
      startDrag: [Function (anonymous)],
      dragReadyEnd: [Function (anonymous)],
      onMouseDrag: [Function (anonymous)]
    },
    keyBinding: KeyBinding {
      '$editor': [Circular *1],
      '$data': [Object],
      '$handlers': [Array],
      '$defaultHandler': [CommandManager]
    },
    '$search': Search { '$options': [Object] },
    '$historyTracker': [Function: bound ],
    '$opResetTimer': <ref *2> [Function: _self] {
      delay: [Function (anonymous)],
      schedule: [Circular *2],
      call: [Function (anonymous)],
      cancel: [Function (anonymous)],
      isPending: [Function (anonymous)]
    },
    '_$emitInputEvent': <ref *3> [Function: _self] {
      delay: [Function (anonymous)],
      schedule: [Circular *3],
      call: [Function (anonymous)],
      cancel: [Function (anonymous)],
      isPending: [Function (anonymous)]
    },
    curOp: null,
    session: EditSession {
      '$breakpoints': [],
      '$decorations': [],
      '$frontMarkers': {},
      '$backMarkers': [Object],
      '$markerId': 4,
      '$undoSelect': true,
      '$foldData': [Array],
      id: 'session2',
      bgTokenizer: [BackgroundTokenizer],
      _eventRegistry: [Object],
      '$onChange': [Function: bound ],
      doc: [Document],
      '$modified': true,
      '$wrapData': [],
      '$rowLengthCache': [Array],
      '$docRowCache': [],
      '$screenRowCache': [],
      selection: [Selection],
      '$bidiHandler': [BidiHandler],
      '$modeId': 'ace/mode/javascript',
      '$mode': [Mode],
      '$worker': null,
      tokenRe: /^[0-9A-Z_a-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԥԱ-Ֆՙա-և֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚء-ٞ٠-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ऀ-ह़-ॎॐ-ॕक़-ॣ०-९ॱ-ॲॹ-ॿঁ-ঃঅ-ঌএ-ঐও-নপ-রলশ-হ়-ৄে-ৈো-ৎৗড়-ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ਾ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલ-ળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ୄେ-ୈୋ-୍ୖ-ୗଡ଼-ଢ଼ୟ-ୣ୦-୯ୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఁ-ఃఅ-ఌఎ-ఐఒ-నప-ళవ-హఽ-ౄె-ైొ-్ౕ-ౖౘ-ౙౠ-ౣ౦-౯ಂ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕ-ೖೞೠ-ೣ೦-೯ം-ഃഅ-ഌഎ-ഐഒ-നപ-ഹഽ-ൄെ-ൈൊ-്ൗൠ-ൣ൦-൯ൺ-ൿං-ඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟෲ-ෳก-ฺเ-๎๐-๙ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໝༀ༘-༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྋྐ-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-Ⴥა-ჺჼᄀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲ-ᝳក-ឳា-៓ៗៜ-៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤜᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧚ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᮪ᮮ-᮹ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳲᴀ-᷽ᷦ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‿-⁀⁔ⁱⁿₐ-ₔ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃ-ↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-⳱ⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〆〪-〯〱-〵〻-〼ぁ-ゖ゙-゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿋ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-ꙟꙢ-꙯꙼-꙽ꙿ-ꚗꚠ-ꛥ꛰-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞌꟻ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺ-ꩻꪀ-ꫂꫛ-ꫝꯀ-ꯪ꯬-꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-鶴侮-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︦︳-︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\$_]+/g,
      nonTokenRe: /^(?:[^0-9A-Z_a-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶ-ͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԥԱ-Ֆՙա-և֑-ֽֿׁ-ׂׄ-ׇׅא-תװ-ײؐ-ؚء-ٞ٠-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ऀ-ह़-ॎॐ-ॕक़-ॣ०-९ॱ-ॲॹ-ॿঁ-ঃঅ-ঌএ-ঐও-নপ-রলশ-হ়-ৄে-ৈো-ৎৗড়-ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼ਵ-ਸ਼ਸ-ਹ਼ਾ-ੂੇ-ੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલ-ળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏ-ଐଓ-ନପ-ରଲ-ଳଵ-ହ଼-ୄେ-ୈୋ-୍ୖ-ୗଡ଼-ଢ଼ୟ-ୣ୦-୯ୱஂ-ஃஅ-ஊஎ-ஐஒ-கங-சஜஞ-டண-தந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఁ-ఃఅ-ఌఎ-ఐఒ-నప-ళవ-హఽ-ౄె-ైొ-్ౕ-ౖౘ-ౙౠ-ౣ౦-౯ಂ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕ-ೖೞೠ-ೣ೦-೯ം-ഃഅ-ഌഎ-ഐഒ-നപ-ഹഽ-ൄെ-ൈൊ-്ൗൠ-ൣ൦-൯ൺ-ൿං-ඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟෲ-ෳก-ฺเ-๎๐-๙ກ-ຂຄງ-ຈຊຍດ-ທນ-ຟມ-ຣລວສ-ຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໝༀ༘-༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྋྐ-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-Ⴥა-ჺჼᄀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲ-ᝳក-ឳា-៓ៗៜ-៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤜᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧚ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᮪ᮮ-᮹ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳲᴀ-᷽ᷦ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‿-⁀⁔ⁱⁿₐ-ₔ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃ-ↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-⳱ⴀ-ⴥⴰ-ⵥⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〆〪-〯〱-〵〻-〼ぁ-ゖ゙-゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆷㇰ-ㇿ㐀-䶵一-鿋ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-ꙟꙢ-꙯꙼-꙽ꙿ-ꚗꚠ-ꛥ꛰-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞌꟻ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺ-ꩻꪀ-ꫂꫛ-ꫝꯀ-ꯪ꯬-꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-鶴侮-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּ-סּףּ-פּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︦︳-︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\$_]|\s])+/g,
      '$wrapAsCode': true,
      _defaultHandlers: {},
      destroyed: false,
      '$undoManager': [UndoManager],
      '$syncInformUndoManager': [Function (anonymous)],
      '$informUndoManager': [Function],
      '$highlightLineMarker': [Range],
      '$selectionMarker': 3,
      '$searchHighlight': [SearchHighlight],
      '$selectionMarkers': [],
      multiSelect: [Selection],
      '$tabSize': 2,
      '$updating': false,
      mergeUndoDeltas: false,
      curOp: [Object]
    },
    '$onDocumentChange': [Function: bound ],
    '$onChangeMode': [Function: bound ],
    '$onTokenizerUpdate': [Function: bound ],
    '$onChangeTabSize': [Function: bound ],
    '$onChangeWrapLimit': [Function: bound ],
    '$onChangeWrapMode': [Function: bound ],
    '$onChangeFold': [Function: bound ],
    '$onChangeFrontMarker': [Function: bound ],
    '$onChangeBackMarker': [Function: bound ],
    '$onChangeBreakpoint': [Function: bound ],
    '$onChangeAnnotation': [Function: bound ],
    '$onCursorChange': [Function: bound ],
    '$onScrollTopChange': [Function: bound ],
    '$onScrollLeftChange': [Function: bound ],
    selection: Selection {
      session: [EditSession],
      doc: [Document],
      '$isEmpty': false,
      _eventRegistry: [Object],
      _defaultHandlers: {},
      lead: [Anchor],
      cursor: [Anchor],
      anchor: [Anchor],
      '$silent': false,
      rangeList: [RangeList],
      ranges: [],
      rangeCount: 0,
      '$anchorChanged': true,
      '$cursorChanged': false,
      '$desiredColumn': null
    },
    '$onSelectionChange': [Function: bound ],
    '$highlightPending': false,
    '$enableMultiselect': true,
    '$onAddRange': [Function: bound ],
    '$onRemoveRange': [Function: bound ],
    '$onMultiSelect': [Function: bound ],
    '$onSingleSelect': [Function: bound ],
    '$multiselectOnSessionChange': [Function: bound ],
    '$checkMultiselectChange': [Function: bound ],
    multiSelect: Selection {
      session: [EditSession],
      doc: [Document],
      '$isEmpty': false,
      _eventRegistry: [Object],
      _defaultHandlers: {},
      lead: [Anchor],
      cursor: [Anchor],
      anchor: [Anchor],
      '$silent': false,
      rangeList: [RangeList],
      ranges: [],
      rangeCount: 0,
      '$anchorChanged': true,
      '$cursorChanged': false,
      '$desiredColumn': null
    },
    '$enableBlockSelect': true,
    '$blockSelectEnabled': true,
    env: {
      document: [EditSession],
      editor: [Circular *1],
      onResize: [Function: bound ]
    },
    '$placeholder': '',
    '$updatePlaceholder': [Function: bound ],
    previousCommand: null,
    '$lastSel': Range { start: [Object], end: [Object], isBackwards: false },
    prevOp: {
      command: {},
      args: undefined,
      scrollTop: 0,
      selectionBefore: undefined,
      selectionChanged: true,
      selectionAfter: [Range]
    }
  }
]
      ✔ Should clear value in the editor on Reset (819ms)
      ✔ Should set empty value properly when save as JSON
      ✔ Should not autofocus until the editor is ready
      ✔ Should not autofocus if the form is readOnly
      CKEditor
        ✔ Should allow to insert media fiels and show the in them read-only mode (308ms)

  TextField Component
    ✔ Should create a new TextField
    ✔ Should build a TextField component
    ✔ Should disable multiple mask selector if component is disabled
    ✔ Should check mask and value in the textfield component in the email template (313ms)
    ✔ Should provide required validation (211ms)
    ✔ Should provide minWords validation (211ms)
    ✔ Should correctly calculate remaining words (834ms)
    ✔ Should provide maxWords validation (211ms)
    ✔ Should provide minLength validation (211ms)
    ✔ Should provide maxLength validation (210ms)
    ✔ Should provide custom validation (212ms)
    ✔ Should provide one custom error message (313ms)
    ✔ Should provide json validation (210ms)
    ✔ Should provide number input mask only after blur event if applyMaskOn setting on blur (429ms)
    ✔ Should provide validation of number input mask only after blur event if applyMaskOn setting on blur (1237ms)
    ✔ Should provide validation of number input mask after setting value (513ms)
    ✔ Should allow inputing only numbers and format input according to input mask (460ms)
    ✔ Should allow dynamic syntax for input mask (394ms)
    ✔ Should provide validation for alphabetic input mask after setting value (429ms)
    ✔ Should allow inputing only letters and format input according to input mask (374ms)
    ✔ Should provide validation for alphanumeric input mask after setting value (408ms)
    ✔ Should allow inputing only letters and digits and format input according to input mask (370ms)
    ✔ Should provide validation for mixed input mask after setting value (400ms)
    ✔ Should allow inputing only letters and digits and format input according to mixed input mask (333ms)
    ✔ Should allow multiple masks (370ms)
    ✔ Should provide validation of number input mask with low dash and placeholder char after setting value (345ms)
    ✔ Should format input according to input mask with low dash when placeholder char is set (315ms)
    ✔ Should correctly count characters if character counter is enabled (615ms)
    ✔ Should format value to uppercase (314ms)
    ✔ Should format value to lowercase (317ms)
    ✔ Should render and open/close calendar on click (1234ms)
    ✔ Should set value into calendar (928ms)
    ✔ Should allow manual input and set value on blur if calendar widget is enabled with allowed input (1242ms)
    ✔ Should allow removing date value if calendar widget is enabled with allowed input (1244ms)
    ✔ Test Display mask (238ms)
    ✔ Should render HTML (318ms)
    ✔ Should render plain text (312ms)

  Time Component
    ✔ Should build a time component
    ✔ Should format value on blur (765ms)
    ✔ Should not show error if value corresponds to the mask (1809ms)
    ✔ Should be invalid if time is not real (661ms)
    ✔ Should build a time component

  Custom Component
    ✔ Should build a Custom component in builder mode

  Url Component
    ✔ Should build a url component
    ✔ Should provide min/max length validation (339ms)
    ✔ Should provide pattern validation (337ms)
    ✔ Should provide url validation (441ms)

  Well Component
    ✔ Should build a Well component
    ✔ Should skip validation on non-input nested components

  Formio.js Tests
    Formio Constructor Tests
      ✔ Should initialize for http://form.io/project/59bbe2ec8c246100079191aa/form/59bbe2ec8c246100079191ab
      ✔ Should initialize for http://form.io/form/59bbe2ec8c246100079191ab
      ✔ Should initialize for http://form.io/form/59bbe2ec8c246100079191ab/submission/59bbe2ec8c246100079191ac
      ✔ Should initialize for http://form.io/form/59bbe2ec8c246100079191ab/action/59bbe2ec8c246100079191ad
      ✔ Should initialize for http://form.io/project/59bbe2ec8c246100079191aa/form/59bbe2ec8c246100079191ab/action/59bbe2ec8c246100079191ad
      ✔ Should initialize for http://api.form.io/project/59bbe2ec8c246100079191aa
      ✔ Should initialize for http://form.io/project/59bbe2ec8c246100079191aa/form/59bbe2ec8c246100079191ab/submission/59bbe2ec8c246100079191ac
      ✔ Should initialize for http://form.io/project/59bbe2ec8c246100079191aa/form/59bbe2ec8c246100079191ab?test=hello&test2=there
      ✔ Should initialize for http://project.form.io/user/login
      ✔ Should initialize for http://project.form.io/user/login/submission/59bbe2ec8c246100079191ac
      ✔ Should initialize for http://project.form.io/user/login/action/59bbe2ec8c246100079191ad
      ✔ Should initialize for http://project.form.io/user/login/action/59bbe2ec8c246100079191ad?test=test2
      ✔ Should initialize for http://project.form.io/user/loginform/action/59bbe2ec8c246100079191ad?test=test2
      ✔ Should initialize for http://project.form.io/user/loginform/submission
      ✔ Should initialize for http://project.form.io/user
      ✔ Should initialize for http://project.form.io/user/actionform/submission/59bbe2ec8c246100079191ac
      ✔ Should initialize for http://project.form.io/user/actionform/?test=foo
    Localhost Constructor Tests
      ✔ Should initialize for https://myproject.localhost:3000/user/actionform/?test=foo
      ✔ Should initialize for https://myproject.localhost:3000/user
    Subdomain Constructor Tests
      ✔ Should initialize for https://myproject.foo.blah.form.io/user/actionform/?test=foo
      ✔ Should initialize for https://myproject.foo.blah.form.io/user
    Subdirectory Constructor Tests
      ✔ Should initialize for https://foo.blah.form.io/myproject/user/actionform/?test=foo
      ✔ Should initialize for https://foo.blah.form.io/myproject/user
      ✔ Should initialize for https://foo.blah.form.io/myproject
    Simple Form Constructor Tests
      ✔ Should initialize for init
      ✔ Should initialize for https://examples.form.io/example
    Open Source Constructor Tests
      ✔ Should initialize for http://localhost:3000/user
      ✔ Should initialize for http://localhost:3000/user/actionform/?test=foo
    Plugins
      ✔ Plugin GET loadProject
      ✔ Plugin POST saveProject
      ✔ Plugin PUT saveProject
      ✔ Plugin DELETE deleteProject
      ✔ Plugin GET loadForm
      ✔ Plugin POST saveForm
      ✔ Plugin PUT saveForm
      ✔ Plugin PUT saveForm
      ✔ Plugin DELETE deleteForm
      ✔ Plugin GET loadForms
      ✔ Plugin GET loadSubmission
      ✔ Plugin POST saveSubmission
      ✔ Plugin PUT saveSubmission
      ✔ Plugin DELETE deleteSubmission
      ✔ Plugin GET loadSubmissions
      ✔ Plugin GET loadAction
      ✔ Plugin POST saveAction
      ✔ Plugin PUT saveAction
      ✔ Plugin DELETE deleteAction
      ✔ Plugin GET loadActions
      ✔ Plugin loadProjects
      ✔ Plugin logout
      ✔ Plugin uploadFile
      ✔ Plugin uploadFile
      ✔ Plugin downloadFile
      ✔ Plugin downloadFile
    Test Formio.js capabilities
      ✔ Registering user.
      ✔ Logging in.
      ✔ Current user.
      ✔ Create Project
      ✔ Getting Projects
      ✔ Read Project
      ✔ Update Project
      ✔ Create Form
      ✔ Load Forms
      ✔ Read Form
      ✔ Update Form
      ✔ Create Submission
      ✔ Load Submissions
      ✔ Read Submission
      ✔ Update Submission
      ✔ Update Submission without ID
      ✔ Delete Submission
      ✔ Delete Form
      ✔ Delete Project
      ✔ Getting Projects
      ✔ Temporary Token
      ✔ Logging Out
      ✔ userPermissions method should give create_all permission
      ✔ userPermissions method should give create_own permission
      ✔ userPermissions method should give permissions for Anonymous role
      ✔ userPermissions method should give all permissions for admin role
      ✔ userPermissions method should give only group read permission for `read` level
      ✔ userPermissions method should give group read and create permissions for `create` level
      ✔ userPermissions method should give group read, create and edit permissions for `write` level
      ✔ userPermissions method should give all group permissions for `admin` level
      ✔ userPermissions method should handle submission with multiple groups
    Formio.currentUser
      ✔ Initial currentUser() should make static request
      ✔ Next currentUser() should return cached value
      ✔ Should render after form submission if renderMode = 'html' (307ms)
      ✔ Should render after form submission if renderMode = 'html' with Nested Form (316ms)

  PDF Builder tests
    PDF Auto Conversion
      ✔ Should assign fields from PDF auto conversion to the empty form
      ✔ Should assign fields from PDF auto conversion to the initial form
      ✔ Should assign fields from PDF non fillable conversion to the initial form
      ✔ Should not assign fields from PDF auto conversion to non pristine form

  S3 Provider
    Function Unit Tests
      ✔ withRetries should retry a given function three times, then throw the provided error (603ms)
    Provider Integration Tests
      AWS S3 Multipart Uploads
        ✔ Given an array of signed urls it should upload a file to S3 using multipart upload

  Rendering Tests
    Framework bootstrap
      Form Renders
        ✔ Form renders advanced
        ✔ Form renders basic
        ✔ Form renders data
        ✔ Form renders defaults
        ✔ Form renders layout
        ✔ Form renders premium
        ✔ Form renders settingErrors
        ✔ Form renders clearOnHide
        ✔ Form renders manualOverride
        ✔ Form renders uniqueApiKeys
        ✔ Form renders uniqueApiKeysLayout
        ✔ Form renders uniqueApiKeysSameLevel
        ✔ Form renders validationOnBlur
        ✔ Form renders calculateValueWithManualOverride
        ✔ Form renders calculateValueWithSubmissionMetadata
        ✔ Form renders displayAsModalEditGrid
        ✔ Form renders formWithAdvancedLogic
        ✔ Form renders formWithPatternValidation
        ✔ Form renders calculatedSelectboxes
        ✔ Form renders columnsForm
        ✔ Form renders calculateZeroValue
        ✔ Form renders formWithConditionalLogic
        ✔ Form renders formWithCalculatedValueWithoutOverriding
        ✔ Form renders formWithTimeComponent
        ✔ Form renders formWithEditGridModalDrafts
        ✔ Form renders formWithBlurValidationInsidePanel
        ✔ Form renders modalEditComponents
        ✔ Form renders calculatedNotPersistentValue
        ✔ Form renders calculateValueInEditingMode
        ✔ Form renders initiallyCollapsedPanel
        ✔ Form renders multipleTextareaInsideConditionalComponent
        ✔ Form renders formComponentWithConditionalRenderingForm
        ✔ Form renders disabledNestedForm
        ✔ Form renders propertyActions
        ✔ Form renders formWithEditGridAndNestedDraftModalRow
        ✔ Form renders formWithDateTimeComponents
        ✔ Form renders formWithCollapsedPanel
        ✔ Form renders formWithCustomFormatDate
        ✔ Form renders wizardWithHiddenPanel
        ✔ Form renders wizardWithSimpleConditionalPage
        ✔ Form renders wizardWithTooltip
        ✔ Form renders resourceKeyCamelCase
        ✔ Form renders tooltipActivateCheckbox
        ✔ Form renders formWithObjectValueSelect
      Component address
        ✔ Renders address for bootstrap
        ✔ Renders address for bootstrap as required
        ✔ Renders address for bootstrap as multiple
        ✔ Renders address for bootstrap value 0 as html
        ✔ Renders address for bootstrap value 0 as string
        ✔ Renders address for bootstrap value 1 as html
        ✔ Renders address for bootstrap value 1 as string
        ✔ Renders address for bootstrap value 2 as html
        ✔ Renders address for bootstrap value 2 as string
      Component base
        ✔ Renders base for bootstrap
        ✔ Renders base for bootstrap as required
        ✔ Renders base for bootstrap as multiple
      Component component
        ✔ Renders component for bootstrap
        ✔ Renders component for bootstrap as required
        ✔ Renders component for bootstrap as multiple
      Component button
        ✔ Renders button for bootstrap
        ✔ Renders button for bootstrap as required
        ✔ Renders button for bootstrap as multiple
        ✔ Renders button for bootstrap value 0 as html
        ✔ Renders button for bootstrap value 0 as string
        ✔ Renders button for bootstrap value 1 as html
        ✔ Renders button for bootstrap value 1 as string
        ✔ Renders button for bootstrap value 2 as html
        ✔ Renders button for bootstrap value 2 as string
      Component checkbox
        ✔ Renders checkbox for bootstrap
        ✔ Renders checkbox for bootstrap as required
        ✔ Renders checkbox for bootstrap as multiple
        ✔ Renders checkbox for bootstrap value 0 as html
        ✔ Renders checkbox for bootstrap value 0 as string
        ✔ Renders checkbox for bootstrap value 1 as html
        ✔ Renders checkbox for bootstrap value 1 as string
        ✔ Renders checkbox for bootstrap value 2 as html
        ✔ Renders checkbox for bootstrap value 2 as string
      Component columns
        ✔ Renders columns for bootstrap
        ✔ Renders columns for bootstrap as required
        ✔ Renders columns for bootstrap as multiple
      Component container
        ✔ Renders container for bootstrap
        ✔ Renders container for bootstrap as required
        ✔ Renders container for bootstrap as multiple
      Component content
        ✔ Renders content for bootstrap
        ✔ Renders content for bootstrap as required
        ✔ Renders content for bootstrap as multiple
      Component currency
        ✔ Renders currency for bootstrap
        ✔ Renders currency for bootstrap as required
        ✔ Renders currency for bootstrap as multiple
        ✔ Renders currency for bootstrap value 0 as html
        ✔ Renders currency for bootstrap value 0 as string
        ✔ Renders currency for bootstrap value 1 as html
        ✔ Renders currency for bootstrap value 1 as string
        ✔ Renders currency for bootstrap value 2 as html
        ✔ Renders currency for bootstrap value 2 as string
        ✔ Renders currency for bootstrap value 3 as html
        ✔ Renders currency for bootstrap value 3 as string
        ✔ Renders currency for bootstrap value 4 as html
        ✔ Renders currency for bootstrap value 4 as string
      Component datagrid
        ✔ Renders datagrid for bootstrap
        ✔ Renders datagrid for bootstrap as required
        ✔ Renders datagrid for bootstrap as multiple
      Component datamap
        ✔ Renders datamap for bootstrap
        ✔ Renders datamap for bootstrap as required
        ✔ Renders datamap for bootstrap as multiple
      Component datetime
        ✔ Renders datetime for bootstrap
        ✔ Renders datetime for bootstrap as required
        ✔ Renders datetime for bootstrap as multiple
        ✔ Renders datetime for bootstrap value 0 as html
        ✔ Renders datetime for bootstrap value 0 as string
        ✔ Renders datetime for bootstrap value 1 as html
        ✔ Renders datetime for bootstrap value 1 as string
        ✔ Renders datetime for bootstrap value 2 as html
        ✔ Renders datetime for bootstrap value 2 as string
      Component day
        ✔ Renders day for bootstrap
        ✔ Renders day for bootstrap as required
        ✔ Renders day for bootstrap as multiple
        ✔ Renders day for bootstrap value 0 as html
        ✔ Renders day for bootstrap value 0 as string
        ✔ Renders day for bootstrap value 1 as html
        ✔ Renders day for bootstrap value 1 as string
        ✔ Renders day for bootstrap value 2 as html
        ✔ Renders day for bootstrap value 2 as string
      Component editgrid
        ✔ Renders editgrid for bootstrap
        ✔ Renders editgrid for bootstrap as required
        ✔ Renders editgrid for bootstrap as multiple
      Component email
        ✔ Renders email for bootstrap
        ✔ Renders email for bootstrap as required
        ✔ Renders email for bootstrap as multiple
        ✔ Renders email for bootstrap value 0 as html
        ✔ Renders email for bootstrap value 0 as string
        ✔ Renders email for bootstrap value 1 as html
        ✔ Renders email for bootstrap value 1 as string
        ✔ Renders email for bootstrap value 2 as html
        ✔ Renders email for bootstrap value 2 as string
      Component input
        ✔ Renders input for bootstrap
        ✔ Renders input for bootstrap as required
        ✔ Renders input for bootstrap as multiple
      Component field
        ✔ Renders field for bootstrap
        ✔ Renders field for bootstrap as required
        ✔ Renders field for bootstrap as multiple
      Component multivalue
        ✔ Renders multivalue for bootstrap
        ✔ Renders multivalue for bootstrap as required
        ✔ Renders multivalue for bootstrap as multiple
      Component list
        ✔ Renders list for bootstrap
        ✔ Renders list for bootstrap as required
        ✔ Renders list for bootstrap as multiple
      Component fieldset
        ✔ Renders fieldset for bootstrap
        ✔ Renders fieldset for bootstrap as required
        ✔ Renders fieldset for bootstrap as multiple
      Component file
        ✔ Renders file for bootstrap
        ✔ Renders file for bootstrap as required
        ✔ Renders file for bootstrap as multiple
        ✔ Renders file for bootstrap value 0 as html
        ✔ Renders file for bootstrap value 0 as string
        ✔ Renders file for bootstrap value 1 as html
        ✔ Renders file for bootstrap value 1 as string
      Component form
        ✔ Renders form for bootstrap
        ✔ Renders form for bootstrap as required
        ✔ Renders form for bootstrap as multiple
        ✔ Renders form for bootstrap value 0 as html
        ✔ Renders form for bootstrap value 0 as string
        ✔ Renders form for bootstrap value 1 as html
        ✔ Renders form for bootstrap value 1 as string
      Component hidden
        ✔ Renders hidden for bootstrap
        ✔ Renders hidden for bootstrap as required
        ✔ Renders hidden for bootstrap as multiple
        ✔ Renders hidden for bootstrap value 0 as html
        ✔ Renders hidden for bootstrap value 0 as string
        ✔ Renders hidden for bootstrap value 1 as html
        ✔ Renders hidden for bootstrap value 1 as string
        ✔ Renders hidden for bootstrap value 2 as html
        ✔ Renders hidden for bootstrap value 2 as string
      Component htmlelement
        ✔ Renders htmlelement for bootstrap
        ✔ Renders htmlelement for bootstrap as required
        ✔ Renders htmlelement for bootstrap as multiple
      Component nested
        ✔ Renders nested for bootstrap
        ✔ Renders nested for bootstrap as required
        ✔ Renders nested for bootstrap as multiple
      Component nesteddata
        ✔ Renders nesteddata for bootstrap
        ✔ Renders nesteddata for bootstrap as required
        ✔ Renders nesteddata for bootstrap as multiple
      Component nestedarray
        ✔ Renders nestedarray for bootstrap
        ✔ Renders nestedarray for bootstrap as required
        ✔ Renders nestedarray for bootstrap as multiple
      Component number
        ✔ Renders number for bootstrap
        ✔ Renders number for bootstrap as required
        ✔ Renders number for bootstrap as multiple
        ✔ Renders number for bootstrap value 0 as html
        ✔ Renders number for bootstrap value 0 as string
        ✔ Renders number for bootstrap value 1 as html
        ✔ Renders number for bootstrap value 1 as string
        ✔ Renders number for bootstrap value 2 as html
        ✔ Renders number for bootstrap value 2 as string
        ✔ Renders number for bootstrap value 3 as html
        ✔ Renders number for bootstrap value 3 as string
        ✔ Renders number for bootstrap value 4 as html
        ✔ Renders number for bootstrap value 4 as string
        ✔ Renders number for bootstrap value 5 as html
        ✔ Renders number for bootstrap value 5 as string
        ✔ Renders number for bootstrap value 6 as html
        ✔ Renders number for bootstrap value 6 as string
        ✔ Renders number for bootstrap value 7 as html
        ✔ Renders number for bootstrap value 7 as string
      Component panel
        ✔ Renders panel for bootstrap
        ✔ Renders panel for bootstrap as required
        ✔ Renders panel for bootstrap as multiple
      Component password
        ✔ Renders password for bootstrap
        ✔ Renders password for bootstrap as required
        ✔ Renders password for bootstrap as multiple
        ✔ Renders password for bootstrap value 0 as html
        ✔ Renders password for bootstrap value 0 as string
        ✔ Renders password for bootstrap value 1 as html
        ✔ Renders password for bootstrap value 1 as string
        ✔ Renders password for bootstrap value 2 as html
        ✔ Renders password for bootstrap value 2 as string
      Component phoneNumber
        ✔ Renders phoneNumber for bootstrap
        ✔ Renders phoneNumber for bootstrap as required
        ✔ Renders phoneNumber for bootstrap as multiple
      Component radio
        ✔ Renders radio for bootstrap
        ✔ Renders radio for bootstrap as required
        ✔ Renders radio for bootstrap as multiple
        ✔ Renders radio for bootstrap value 0 as html
        ✔ Renders radio for bootstrap value 0 as string
        ✔ Renders radio for bootstrap value 1 as html
        ✔ Renders radio for bootstrap value 1 as string
        ✔ Renders radio for bootstrap value 2 as html
        ✔ Renders radio for bootstrap value 2 as string
        ✔ Renders radio for bootstrap value 3 as html
        ✔ Renders radio for bootstrap value 3 as string
      Component recaptcha
        ✔ Renders recaptcha for bootstrap
        ✔ Renders recaptcha for bootstrap as required
        ✔ Renders recaptcha for bootstrap as multiple
      Component select
        ✔ Renders select for bootstrap
        ✔ Renders select for bootstrap as required
        ✔ Renders select for bootstrap as multiple
        ✔ Renders select for bootstrap value 0 as html
        ✔ Renders select for bootstrap value 0 as string
        ✔ Renders select for bootstrap value 1 as html
        ✔ Renders select for bootstrap value 1 as string
        ✔ Renders select for bootstrap value 2 as html
        ✔ Renders select for bootstrap value 2 as string
        ✔ Renders select for bootstrap value 3 as html
        ✔ Renders select for bootstrap value 3 as string
      Component selectboxes
        ✔ Renders selectboxes for bootstrap
        ✔ Renders selectboxes for bootstrap as required
        ✔ Renders selectboxes for bootstrap as multiple
        ✔ Renders selectboxes for bootstrap value 0 as html
        ✔ Renders selectboxes for bootstrap value 0 as string
        ✔ Renders selectboxes for bootstrap value 1 as html
        ✔ Renders selectboxes for bootstrap value 1 as string
        ✔ Renders selectboxes for bootstrap value 2 as html
        ✔ Renders selectboxes for bootstrap value 2 as string
        ✔ Renders selectboxes for bootstrap value 3 as html
        ✔ Renders selectboxes for bootstrap value 3 as string
        ✔ Renders selectboxes for bootstrap value 4 as html
        ✔ Renders selectboxes for bootstrap value 4 as string
      Component signature
        ✔ Renders signature for bootstrap
        ✔ Renders signature for bootstrap as required
        ✔ Renders signature for bootstrap as multiple
        ✔ Renders signature for bootstrap value 0 as html
        ✔ Renders signature for bootstrap value 0 as string
        ✔ Renders signature for bootstrap value 1 as html
        ✔ Renders signature for bootstrap value 1 as string
        ✔ Renders signature for bootstrap value 2 as html
        ✔ Renders signature for bootstrap value 2 as string
        ✔ Renders signature for bootstrap value 3 as html
        ✔ Renders signature for bootstrap value 3 as string
      Component survey
        ✔ Renders survey for bootstrap
        ✔ Renders survey for bootstrap as required
        ✔ Renders survey for bootstrap as multiple
        ✔ Renders survey for bootstrap value 0 as html
        ✔ Renders survey for bootstrap value 0 as string
        ✔ Renders survey for bootstrap value 1 as html
        ✔ Renders survey for bootstrap value 1 as string
        ✔ Renders survey for bootstrap value 2 as html
        ✔ Renders survey for bootstrap value 2 as string
      Component table
        ✔ Renders table for bootstrap
        ✔ Renders table for bootstrap as required
        ✔ Renders table for bootstrap as multiple
      Component tabs
        ✔ Renders tabs for bootstrap
        ✔ Renders tabs for bootstrap as required
        ✔ Renders tabs for bootstrap as multiple
      Component tags
        ✔ Renders tags for bootstrap
        ✔ Renders tags for bootstrap as required
        ✔ Renders tags for bootstrap as multiple
        ✔ Renders tags for bootstrap value 0 as html
        ✔ Renders tags for bootstrap value 0 as string
        ✔ Renders tags for bootstrap value 1 as html
        ✔ Renders tags for bootstrap value 1 as string
        ✔ Renders tags for bootstrap value 2 as html
        ✔ Renders tags for bootstrap value 2 as string
      Component textarea
        ✔ Renders textarea for bootstrap
        ✔ Renders textarea for bootstrap as required
        ✔ Renders textarea for bootstrap as multiple
        ✔ Renders textarea for bootstrap value 0 as html
        ✔ Renders textarea for bootstrap value 0 as string
        ✔ Renders textarea for bootstrap value 1 as html
        ✔ Renders textarea for bootstrap value 1 as string
        ✔ Renders textarea for bootstrap value 2 as html
        ✔ Renders textarea for bootstrap value 2 as string
      Component textfield
        ✔ Renders textfield for bootstrap
        ✔ Renders textfield for bootstrap as required
        ✔ Renders textfield for bootstrap as multiple
        ✔ Renders textfield for bootstrap value 0 as html
        ✔ Renders textfield for bootstrap value 0 as string
        ✔ Renders textfield for bootstrap value 1 as html
        ✔ Renders textfield for bootstrap value 1 as string
        ✔ Renders textfield for bootstrap value 2 as html
        ✔ Renders textfield for bootstrap value 2 as string
        ✔ Renders textfield for bootstrap value 3 as html
        ✔ Renders textfield for bootstrap value 3 as string
      Component time
        ✔ Renders time for bootstrap
        ✔ Renders time for bootstrap as required
        ✔ Renders time for bootstrap as multiple
        ✔ Renders time for bootstrap value 0 as html
        ✔ Renders time for bootstrap value 0 as string
        ✔ Renders time for bootstrap value 1 as html
        ✔ Renders time for bootstrap value 1 as string
        ✔ Renders time for bootstrap value 2 as html
        ✔ Renders time for bootstrap value 2 as string
        ✔ Renders time for bootstrap value 3 as html
        ✔ Renders time for bootstrap value 3 as string
      Component unknown
        ✔ Renders unknown for bootstrap
        ✔ Renders unknown for bootstrap as required
        ✔ Renders unknown for bootstrap as multiple
      Component url
        ✔ Renders url for bootstrap
        ✔ Renders url for bootstrap as required
        ✔ Renders url for bootstrap as multiple
        ✔ Renders url for bootstrap value 0 as html
        ✔ Renders url for bootstrap value 0 as string
        ✔ Renders url for bootstrap value 1 as html
        ✔ Renders url for bootstrap value 1 as string
        ✔ Renders url for bootstrap value 2 as html
        ✔ Renders url for bootstrap value 2 as string
      Component well
        ✔ Renders well for bootstrap
        ✔ Renders well for bootstrap as required
        ✔ Renders well for bootstrap as multiple

  Util Tests
    eachComponent
      ✔ should iterate through nested components in the right order
      ✔ should include layouts components if provided
      ✔ Should provide the paths to all of the components
      ✔ Should be able to find all textfield components
      ✔ Should be able to find components with special properties.
      ✔ Should be able to generate paths based on component types
      ✔ Should still provide the correct paths when it is not recursive
      ✔ should be able to block recursion
      ✔ should not include `htmlelement` components when `includeAll` is not provided
      ✔ should include `htmlelement` components when `includeAll` is provided
      ✔ should not include `content` components when `includeAll` is not provided
      ✔ should include `content` components when `includeAll` is provided
      findComponent
        ✔ should find correct component in nested structure
        ✔ should find correct component in flat structure
    getComponent
      ✔ should return the correct components
      ✔ should work with a different this context
    flattenComponents
      ✔ should return an object of flattened components
      ✔ should work with a different this context
    getValue
      ✔ should be able to get a simple value
      ✔ should be able to get a value from a container
    parseFloat
      ✔ should clear input and parse value
    formatAsCurrency
      ✔ should be able to format Float value for Currency component
      ✔ should be able to format String value for Currency component
    checkCalculated
      ✔ should be able to calculate value based on javascript code
      ✔ should be able to calculate value based on json logic
      ✔ should return undefined if no logic provided
    checkCondition
      ✔ should display component by default
      ✔ should calculate simple triggers
      ✔ should be able to calculate condition based on javascript code
      ✔ should be able to calculate condition based on json logic
    getDateSetting
      ✔ should return null if no date provided
      ✔ should return valid Date on serialized date provided
      ✔ should be able to get value using moment APIs
    checkTrigger
      ✔ should default to false
      ✔ should calculate simple triggers
      ✔ should be able to calculate trigger based on javascript code
      ✔ should be able to calculate trigger based on json logic
    setActionProperty
      ✔ should set a boolean action property to true
      ✔ should set a boolean action property to false
      ✔ should set a boolean action nested property
      ✔ should set a string action property
      ✔ should set a string action property with result templating
      ✔ should set a string action property with row templating
      ✔ should set a string action property with data templating
      ✔ should set a string action property with component templating
      ✔ should do nothing with a bad request
    delay
      ✔ should act as regular setTimeout() (200ms)
      ✔ should be cancelable via direct timer access (100ms)
      ✔ should be cancelable via cancel() method (100ms)
      ✔ should be able to call passed function synchronously
    withSwitch
      ✔ should return Array with two functions
      #get
        ✔ should return one of state
        ✔ should be pure
      #toggle
        ✔ should cycle between states
    unfold
      ✔ should return provided argument
      ✔ should call parameter, if it is function and return result
    firstNonNil
      ✔ should return first non nil value
      ✔ should unfold all functions in array
    observeOverload
      ✔ should invoke the callback, if there too many dispatches in a short time
      ✔ should allow configuring the events limit
      ✔ should not invoke callback, if time between calls longer then options.delay (332ms)
      ✔ Should return string without HTML characters
    getCurrencyAffixes
      ✔ USD en

  Legacy Validator Tests
    ✔ Should test for minLength
    ✔ Should test for maxLength
    ✔ Should test for email
    ✔ Should test for required
    ✔ Should test for custom
    ✔ Should test for pattern
    ✔ Should test for json
    ✔ Should test for date

  Validator Tests
    ✔ Validates for required
    ✔ Overrides the message and level
    ✔ Only returns the last message for a rule
    ✔ Fulfills custom validation
    ✔ Fulfills custom validation (multiple)
    ✔ Fulfills date validation
    ✔ Fulfills day validation
    ✔ Fulfills email validation
    ✔ Fulfills json validation
    ✔ Fulfills json validation (multiple)
    ✔ Fulfills mask validation
    ✔ Fulfills max validation
    ✔ Fulfills maxDate validation
    ✔ Fulfills maxLength validation
    ✔ Fulfills maxWords validation
    ✔ Fulfills maxYear validation
    ✔ Fulfills minYear validation
    ✔ Fulfills min validation
    ✔ Fulfills minDate validation
    ✔ Fulfills minLength validation
    ✔ Fulfills minWords validation
    ✔ Fulfills pattern validation
    ✔ Fulfills pattern validation (multiple)
    ✔ Fulfills required validation
    ✔ Fulfills required validation (multiple)
    ✔ Fulfills url validation

  Webform tests
    ✔ Should validate hidden and conditionally hidden components when validateWhenHidden is enabled for those components (1822ms)
    ✔ Should not validate hidden and conditionally hidden components when validateWhenHidden is not enabled for those components (925ms)
    ✔ Should not lose values of conditionally visible components on setValue when server option is passed (519ms)
    ✔ Should not lose values of conditionally visible components on setValue when server option is not passed (521ms)
[
  {
    component: {
      label: 'Name',
      applyMaskOn: 'change',
      tableView: true,
      validate: [Object],
      key: 'name',
      type: 'textfield',
      input: true,
      id: 'ekt2oqp',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Name is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'name'
  }
]
    ✔ Should fire error and submitError events with args on attempt to submit invalid form (314ms)
[ { message: 'Server error', messages: [], formattedKeyOrPath: '' } ]
    ✔ Should keep non-component server errors visible after changes in the form (816ms)
    ✔ Should execute form controller (304ms)
    ✔ Should set radio components value inside data grid correctly (208ms)
    ✔ Should not fall into setValue calls loop when doing value calculation on server (319ms)
    ✔ Should fire blur and focus events for address and select components (1220ms)
    ✔ Should return correct string value for checkbox radio type (406ms)
    ✔ Should set value for hidden nested component through the logic triggered by event (1035ms)
    ✔ Should recalculate value when submission is being set in edit mode (1017ms)
    ✔ Should not activate checkbox when clicking tooltip icon (224ms)
    ✔ Should show submission if passed as option
    ✔ Should show survey values in html render mode
    ✔ Should show select boxes values in html render mode
    ✔ Should show day value in html render mode
    ✔ Should allow to input value and add rows in deeply nested conditional dataGrid (931ms)
    ✔ Should adjust columns when conditional fields appear/disappear (925ms)
    ✔ Should not translate en value if _userInput option is provided and value presents in reserved translation names (115ms)
    ✔ Should translate in English if _userInput option is provided and value does not present in reserved translation names
    ✔ Should translate value in franch if _userInput option is provided and value does not present in reserved translation names
    ✔ Should display dataGrid conditional column once the condition is met (313ms)
    ✔ Should remove dataGrid extra rows and components after setting value with less row number (312ms)
    ✔ Should not delete/change date value in dataGrid after adding new row (401ms)
[
  {
    component: {
      label: 'Text Field',
      tableView: true,
      validate: [Object],
      key: 'textField',
      type: 'textfield',
      input: true,
      hideOnChildrenHidden: false,
      id: 'ezh3to',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  }
]
    ✔ Should open collapsed panel with invalid components inside container that is inside the panel on submit (212ms)
    ✔ Should correctly set date after collapsing and openning the panel (491ms)
    ✔ Should show confirmation alert when clicking X btn or clicking outside modal window after editing
  editGrid modal draft row (1036ms)
    ✔ Should not show validation errors when saving invalid draft row in dataGrid (383ms)
    ✔ Should show dataGrid rows when viewing submission in dataGrid with initEmpty option (524ms)
    ✔ Should not show dataGrid rows when empty submission is set for dataGrid with initEmpty (516ms)
    ✔ Should show address submission data inside dataGrid (323ms)
    ✔ Should validate field on blur inside panel (663ms)
    ✔ Should submit form with empty time field when time field is not required (209ms)
[
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      modal: true,
      rowDrafts: true,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      id: 'edi1t4o',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Please correct invalid rows before proceeding.',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Number',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      validate: [Object],
      key: 'number',
      type: 'number',
      input: true,
      row: '0-1',
      id: 'ekk41uc',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid[0].number'
  }
]
    ✔ Should show validation errors and update validation errors list when openning and editing edit grid rows
  in draft modal mode after pushing submit btn (1184ms)
    ✔ Should not override calculated value (724ms)
    ✔ Should modify calculated value only if it was not manually modified when allowCalculateOverride is true (1517ms)
    ✔ Should show field only in container where radio component has 'yes' value when containers contain radio
  components with the same key (425ms)
[
  {
    component: {
      label: 'Text Field',
      tableView: true,
      validate: [Object],
      key: 'textField',
      type: 'textfield',
      input: true,
      id: 'e7xp6u8q',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  }
]
    ✔ Should show only "required field" error when submitting empty required field with pattern validation (515ms)
    ✔ Should disable field applying advanced logic if dot is used inside component key (517ms)
[
  {
    component: {
      label: 'Number',
      inputFormat: 'plain',
      validate: [Object],
      key: 'number',
      type: 'number',
      input: true,
      id: 'ek415pk',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      tableView: false,
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  }
]
    ✔ Should only scroll to alerts dialog when submitting an invalid form (771ms)
[
  {
    component: {
      label: 'Number1',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      calculateServer: false,
      validate: [Object],
      key: 'number1',
      type: 'number',
      input: true,
      id: 'e5xxdr6',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number1 is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number1'
  },
  {
    component: {
      label: 'Number2',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      calculateValue: [Object],
      calculateServer: false,
      allowCalculateOverride: true,
      validate: [Object],
      key: 'number2',
      type: 'number',
      input: true,
      id: 'egqb3hk',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number2 is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number2'
  }
]
    ✔ Should calculate the field value after validation errors appeared on submit (522ms)
    ✔ Should calculate the value when editing set values with possibility of manual override (1422ms)
    ✔ Should create a simple form
    ✔ Should set a submission to the form.
    ✔ Should translate a form from options
    ✔ Should get the language passed via options
    ✔ Should translate form errors in alerts
    ✔ Should translate a form after instantiate
    ✔ Should add a translation after instantiate
    ✔ Should switch a translation after instantiate
    ✔ Should keep translation after redraw
    ✔ Should fire languageChanged event when language is set
    ✔ When submitted should strip fields with persistent: client-only from submission
    ✔ Should keep components valid if they are pristine (561ms)
    ✔ Should delete value of hidden component if clearOnHide is turned on (517ms)
    ✔ Should not fire validation on init. (115ms)
    ✔ Should validation on init when alwaysDirty flag is set. (114ms)
    ✔ Should validation on init when dirty flag is set. (120ms)
    ✔ Should not show any errors on setSubmission when providing an empty data object (113ms)
    ✔ Should not show errors when providing empty data object with data set. (116ms)
    ✔ Should show errors on setSubmission when providing explicit data values. (120ms)
    ✔ Should not show errors on setSubmission with noValidate:TRUE (110ms)
    ✔ Should set calculated value correctly (514ms)
    ✔ Should render Nested Modal Wizard Form correctly (291ms)
    ✔ Should set calculated value correctly (1267ms)
    ✔ Should set different ids for components inside different Table rows (1612ms)
    ✔ Should render components properly (770ms)
    ✔ Should disable all the components inside Nested Form if it is disabled
Error: fetch-mock: No fallback response defined for GET to https://api.localhost:3000/[object%20Object]?live=1
    at Object.FetchMock.executeRouter (/home/glootie/repos/formio.js/node_modules/fetch-mock/es5/lib/fetch-handler.js:382:11)
    at Object.FetchMock._fetchHandler (/home/glootie/repos/formio.js/node_modules/fetch-mock/es5/lib/fetch-handler.js:278:34)
    at Object.FetchMock.fetchHandler (/home/glootie/repos/formio.js/node_modules/fetch-mock/es5/lib/fetch-handler.js:241:15)
    at Function.request (/home/glootie/repos/formio.js/node_modules/@formio/core/lib/sdk/Formio.js:1371:88)
    at /home/glootie/repos/formio.js/node_modules/@formio/core/lib/sdk/Formio.js:1294:31
    ✔ Should restore value correctly if NestedForm is saved as reference (366ms)
    ✔ Should not set the default value if there is only Radio with False value (621ms)
    ✔ Should add and clear input error classes correctly (1986ms)
    ✔ Should have number and currency fields in empty form submission (416ms)
    ✔ Test Truncate Multiple Spaces (426ms)
    ✔ HTML render mode for Webform (438ms)
    ✔ HTML render mode for Wizard (1165ms)
    ✔ Test optional sanitize (280ms)
    ✔ Should execute clearOnHide if visibility of the component inside an EditGrid has changed (787ms)
    ✔ Should show values in editGrid rows with nested dataGrid when viewing submission with initEmpty option (215ms)
    ✔ Should not refetch options for Select if there was an error (823ms)
[
  {
    component: {
      label: 'This line',
      tableView: false,
      storage: 'base64',
      webcam: false,
      fileTypes: [Array],
      multiple: true,
      validate: [Object],
      key: 'file',
      type: 'file',
      input: true,
      id: 'e9u725',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      image: false,
      privateDownload: false,
      imageSize: '200',
      filePattern: '*',
      fileMinSize: '0KB',
      fileMaxSize: '1GB',
      uploadOnly: false
    },
    message: 'will be showed once',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'file'
  }
]
    ✔ Should show only one custom error when submitting empty required field with multiple validation (215ms)
[
  {
    component: {
      label: 'Number',
      mask: false,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      truncateMultipleSpaces: false,
      validate: [Object],
      key: 'number',
      type: 'number',
      input: true,
      id: 'e4digbw',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  }
]
    ✔ Should show validation error when submitting number with just "-" sign and required validation (214ms)
    set/get nosubmit
      ✔ should set/get nosubmit flag and emit nosubmit event
    getValue and setValue
      ✔ should setValue and getValue (537ms)
    ReadOnly Form
      ✔ Should apply conditionals when in readOnly mode. (126ms)
    Validate onBlur
      ✔ Should keep component valid onChange (611ms)
      ✔ Should keep components inside DataGrid valid onChange (525ms)
    Reset values
      ✔ Should reset all values correctly.
    New Simple Conditions
      ✔ Should show field if all conditions are met (612ms)
      ✔ Should show field if any condition is met (1524ms)
      ✔ Should hide field if any condition is met (1226ms)
      ✔ Should hide field if all conditions are met (621ms)
      ✔ Should show field if all conditions are met (test with different component types + multiple components) (641ms)
      ✔ Should show/hide field inside datagrid rows (340ms)
      ✔ Should set component value through logic triggered by simple condition (322ms)
      ✔ Should show field if all conditions are met (test all operators) (677ms)
      ✔ Should show the field on select boxes value (616ms)
      ✔ Should show field when condition is based on the values of select resource with object value (819ms)
    Calculate Value with allowed manual override
      ✔ Should reset all values correctly. (1202ms)
      ✔ Should apply submission metadata value in calculation. (263ms)
      ✔ Should allow to change value. (516ms)
      ✔ Should recalculate values for components with "allow override" after first and only dataGrid row is removed/reset (1652ms)
      ✔ Should recalculate values for components with "allow override" after the form is reset (1637ms)
      ✔ Should recalculate values for conditional components with "allow override" and "clear on hide" enabled when components become visible again (1324ms)
    Modal Edit
      ✔ Test rendering previews after the submission is set
      ✔ Test updating previews after aboting changes (133ms)
    Calculate Value
      ✔ Should calculate value when set submission if the component is not persistent (557ms)
      ✔ Should calculate value by datasouce component when editing mode is on (1020ms)
      ✔ Should calculate value properly in editing mode (1021ms)
      ✔ Should not override value which was set from submission (1017ms)
    Test sanitizeConfig
      ✔ Should sanitize components using default sanitizeConfig
      ✔ Should sanitize components using sanitizeConfig from form settings
      ✔ Should sanitize components using sanitizeConfig from global settings
      ✔ sanitizeConfig from form options must not be overriden by sanitizeConfig from global settings
      ✔ sanitizeConfig from form options must not be overriden by sanitizeConfig from form settings
      ✔ sanitizeConfig from form settings must not be overriden by sanitizeConfig from global settings
    Simple Form Test
      ✔ Test valid submission
      ✔ Test invalid email
Expected error when executing submit in errors test
    Submittion test.
      ✔ Should set submittion in form with container and layout components
    Conditional Form Test
      ✔ Test hidden components
      ✔ Test validation errors on typeShow field
Expected error when executing submit in errors test
      ✔ Test validation errors on typeMe field
      ✔ Test validation errors on typeThe field
      ✔ Test validation errors on typeMonkey field
      ✔ Test conditional when typeShow is set
      ✔ Test conditional when typeShow, typeMe is set
      ✔ Test conditional when typeShow, typeMe, typeThe is set
      ✔ Test conditional when typeShow, typeMe, typeThe, typeMonkey is set
    Calculated Fields Test
      ✔ Test calculated fields
    Date Fields Test
      ✔ Test date only fields format yyyy-mm-dd
      ✔ Test date only fields format dd/mm/yyyy
    Field Logic Tests
      ✔ Test Title, Description and Disabled
      ✔ Test Required
      ✔ Test Set Value
    Actions Form Tests
      ✔ Test initialize action with data (78ms)
    Email Action Test
      ✔ Test initialize action with data (556ms)
    Nested Form Tests
      ✔ Form validation should skip hidden nested form
      ✔ Form validation should validate nested form
    Clear on hide Form Test
      ✔ Test starting hidden
      ✔ Test starting visible
      ✔ Test with data
      ✔ Test changing visible from hidden to visible
      ✔ Test changing visible from visible to hidden
    Test basic component settings: placeholder
      ✔ Should show placeholder
    Test basic component settings: description
      ✔ Should show description (99ms)
    Test basic component settings: tooltip
      ✔ Should render tooltip icon and show tooltip description on click (346ms)
    Test basic component settings: prefix
      ✔ Should show prefix
    Test basic component settings: suffix
      ✔ Should show suffix
    Test basic component settings: customClass
      ✔ Should set custom css class (121ms)
    Test basic component settings: tabindex
      ✔ Should set tabindex (39ms)
    Test basic component settings: hidden
      ✔ Should not render hidden component (41ms)
    Test basic component settings: hideLabel
      ✔ Should hide component label (89ms)
    Test basic component settings: disabled
      ✔ Should disable components (97ms)
    Test basic component settings: defaultValue
      ✔ Should set default value (58ms)
    Test basic component settings: customDefaultValue
      ✔ Should correctly set custom default value (103ms)
    Test basic component settings: redrawOn
      ✔ Should redraw on checkbox value change (77ms)
    Test basic component settings: multiple
      ✔ Should render component in multiple mode and able to add/remove value (298ms)
      ✔ Should set multiple values (647ms)
    Test basic component settings: modalEdit
      ✔ Should open and close modal window (270ms)
      ✔ Should delete component changes when closing modal window and clicking "delete it" in confirmation dialog (520ms)
      ✔ Should save component values and close the modal after clicking "save" (394ms)
[
  {
    component: {
      label: 'Text Field Child',
      tableView: true,
      key: 'textFieldChild',
      type: 'textfield',
      input: true,
      shouldIncludeSubFormPath: true,
      id: 'etclbg',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Child is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.textFieldChild'
  },
  {
    component: {
      label: 'Time Child',
      inputType: 'text',
      tableView: true,
      key: 'timeChild',
      type: 'time',
      input: true,
      inputMask: '99:99',
      shouldIncludeSubFormPath: true,
      id: 'e8bycuo',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'Time Child is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.timeChild'
  },
  {
    component: {
      label: 'Number Inside Child Panel',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberInsideChildPanel',
      type: 'number',
      input: true,
      shouldIncludeSubFormPath: true,
      id: 'eh2nrj',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Inside Child Panel is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.numberInsideChildPanel'
  },
  {
    component: {
      label: 'Data Grid Child',
      reorder: false,
      addAnotherPosition: 'bottom',
      layoutFixed: false,
      enableRowGroups: false,
      initEmpty: false,
      tableView: false,
      defaultValue: [Array],
      key: 'dataGridChild',
      type: 'datagrid',
      input: true,
      components: [Array],
      shouldIncludeSubFormPath: true,
      id: 'ei5fa3',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false
    },
    message: 'Data Grid Child is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.dataGridChild'
  },
  {
    component: {
      label: 'Text Field',
      tableView: true,
      key: 'textField',
      type: 'textfield',
      input: true,
      modalEdit: true,
      id: 'e14uco',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  },
  {
    component: {
      label: 'Text Area',
      autoExpand: false,
      tableView: true,
      key: 'textArea',
      type: 'textarea',
      input: true,
      modalEdit: true,
      id: 'e2yasn',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'html',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      rows: 3,
      wysiwyg: false,
      editor: '',
      fixedSize: true
    },
    message: 'Text Area is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textArea'
  },
  {
    component: {
      label: 'Number',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'number',
      type: 'number',
      input: true,
      modalEdit: true,
      id: 'eaq9s0m',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  },
  {
    component: {
      label: 'Password',
      tableView: false,
      key: 'password',
      type: 'password',
      input: true,
      protected: true,
      modalEdit: true,
      id: 'en7kax',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Password is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'password'
  },
  {
    component: {
      label: 'Checkbox',
      tableView: false,
      key: 'checkbox',
      type: 'checkbox',
      input: true,
      modalEdit: true,
      id: 'ennzqza',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'Checkbox is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkbox'
  },
  {
    component: {
      label: 'Select Boxes',
      optionsLabelPosition: 'right',
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'selectBoxes',
      type: 'selectboxes',
      input: true,
      inputType: 'checkbox',
      modalEdit: true,
      id: 'ejwt0n',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      data: [Object],
      fieldSet: false,
      inline: false
    },
    message: 'Select Boxes is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectBoxes'
  },
  {
    component: {
      label: 'Select',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'select',
      type: 'select',
      indexeddb: [Object],
      input: true,
      modalEdit: true,
      id: 'eddill',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Select is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'select'
  },
  {
    component: {
      label: 'Radio',
      optionsLabelPosition: 'right',
      inline: false,
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'radio',
      type: 'radio',
      input: true,
      modalEdit: true,
      id: 'ef8kssv',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      inputType: 'radio',
      data: [Object],
      fieldSet: false
    },
    message: 'Radio is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'radio'
  },
  {
    component: {
      label: 'Email',
      tableView: true,
      key: 'email',
      type: 'email',
      input: true,
      modalEdit: true,
      id: 'ebeu4ih',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'email',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      kickbox: [Object]
    },
    message: 'Email is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'email'
  },
  {
    component: {
      label: 'Url',
      tableView: true,
      key: 'url',
      type: 'url',
      input: true,
      modalEdit: true,
      id: 'edcigwm',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'url',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Url is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'url'
  },
  {
    component: {
      label: 'Phone Number',
      tableView: true,
      key: 'phoneNumber',
      type: 'phoneNumber',
      input: true,
      modalEdit: true,
      id: 'ev5av7r',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'tel',
      inputFormat: 'plain',
      inputMask: '(999) 999-9999',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      inputMode: 'decimal'
    },
    message: 'Phone Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'phoneNumber'
  },
  {
    component: {
      label: 'Tags',
      tableView: false,
      key: 'tags',
      type: 'tags',
      input: true,
      modalEdit: true,
      id: 'ersti4u',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      delimeter: ',',
      storeas: 'string',
      maxTags: 0
    },
    message: 'Tags is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'tags'
  },
  {
    component: {
      label: 'Address',
      tableView: false,
      provider: 'nominatim',
      key: 'address',
      type: 'address',
      providerOptions: [Object],
      input: true,
      components: [Array],
      modalEdit: true,
      id: 'el4g4q8',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      switchToManualModeLabel: "Can't find address? Switch to manual mode.",
      manualModeViewString: '',
      disableClearIcon: false,
      enableManualMode: false
    },
    message: 'Address is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'address'
  },
  {
    component: {
      label: 'Date / Time',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTime',
      type: 'datetime',
      input: true,
      widget: [Object],
      modalEdit: true,
      id: 'e9casfr9',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'Date / Time is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTime'
  },
  {
    component: {
      label: 'Day',
      hideInputLabels: false,
      inputsLabelPosition: 'top',
      useLocaleSettings: false,
      tableView: false,
      fields: [Object],
      key: 'day',
      type: 'day',
      input: true,
      defaultValue: '00/00/0000',
      modalEdit: true,
      id: 'e6im3zc',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dayFirst: false,
      maxYear: undefined,
      minYear: undefined
    },
    message: 'Day is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'day'
  },
  {
    component: {
      label: 'Time',
      tableView: true,
      key: 'time',
      type: 'time',
      input: true,
      inputMask: '99:99',
      modalEdit: true,
      id: 'ee5ywl',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'time',
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'Time is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'time'
  },
  {
    component: {
      label: 'Currency',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currency',
      type: 'currency',
      input: true,
      delimiter: true,
      modalEdit: true,
      id: 'em8av1i',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Currency is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currency'
  },
  {
    component: {
      label: 'Survey',
      tableView: false,
      questions: [Array],
      values: [Array],
      key: 'survey',
      type: 'survey',
      input: true,
      modalEdit: true,
      id: 'enx25zt',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Survey is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'survey'
  },
  {
    component: {
      label: 'Number Column',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberColumn',
      type: 'number',
      input: true,
      hideOnChildrenHidden: false,
      id: 'emkbwmf',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Column is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberColumn'
  },
  {
    component: {
      label: 'Text Field Column',
      tableView: true,
      key: 'textFieldColumn',
      type: 'textfield',
      input: true,
      hideOnChildrenHidden: false,
      id: 'ekntbtw',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Column is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldColumn'
  },
  {
    component: {
      label: 'Number Fieldset',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberFieldset',
      type: 'number',
      input: true,
      id: 'e45qh3h',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Fieldset is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberFieldset'
  },
  {
    component: {
      label: 'Number Panel',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberPanel',
      type: 'number',
      input: true,
      id: 'ef4mqpt',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Panel is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberPanel'
  },
  {
    component: {
      label: 'Select Table',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'selectTable',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'enbumi',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Select Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectTable'
  },
  {
    component: {
      label: 'Checkbox Table',
      tableView: false,
      key: 'checkboxTable',
      type: 'checkbox',
      input: true,
      defaultValue: false,
      id: 'erifmfg',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'Checkbox Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkboxTable'
  },
  {
    component: {
      label: 'Date / Time Table',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTimeTable',
      type: 'datetime',
      input: true,
      widget: [Object],
      id: 'efer4a',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'Date / Time Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTimeTable'
  },
  {
    component: {
      label: 'Currency Table',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currencyTable',
      type: 'currency',
      input: true,
      delimiter: true,
      id: 'epx2co5',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Currency Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currencyTable'
  },
  {
    component: {
      label: 'Number Tab',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberTab',
      type: 'number',
      input: true,
      id: 'eae9pv',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Tab is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberTab'
  },
  {
    component: {
      label: 'Text Field Tab',
      tableView: true,
      key: 'textFieldTab',
      type: 'textfield',
      input: true,
      id: 'e4zcm0r',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Tab is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldTab'
  },
  {
    component: {
      label: 'Text Field Well',
      tableView: true,
      key: 'textFieldWell',
      type: 'textfield',
      input: true,
      id: 'eixbqqj',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Well is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldWell'
  },
  {
    component: {
      label: 'Hidden',
      key: 'hidden',
      type: 'hidden',
      input: true,
      tableView: false,
      modalEdit: true,
      id: 'eb06nox',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'hidden'
    },
    message: 'Hidden is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'hidden'
  },
  {
    component: {
      label: 'Text Field Container',
      tableView: true,
      key: 'textFieldContainer',
      type: 'textfield',
      input: true,
      id: 'e0g7lpw',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Container is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'container.textFieldContainer'
  },
  {
    component: {
      label: 'Data Map',
      tableView: false,
      key: 'dataMap',
      type: 'datamap',
      input: true,
      valueComponent: [Object],
      modalEdit: true,
      id: 'eu56ov',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      addAnother: 'Add Another',
      disableAddingRemovingRows: false,
      keyBeforeValue: true
    },
    message: 'Data Map is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataMap'
  },
  {
    component: {
      label: 'Data Grid',
      reorder: false,
      addAnotherPosition: 'bottom',
      layoutFixed: false,
      enableRowGroups: false,
      initEmpty: false,
      tableView: false,
      defaultValue: [Array],
      key: 'dataGrid',
      type: 'datagrid',
      input: true,
      components: [Array],
      modalEdit: true,
      id: 'eyze2w',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false
    },
    message: 'Data Grid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataGrid'
  },
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      rowDrafts: false,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      modalEdit: true,
      id: 'efkkhzs',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      modal: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Edit Grid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Upload',
      tableView: false,
      storage: 'base64',
      webcam: false,
      fileTypes: [Array],
      key: 'file',
      type: 'file',
      input: true,
      modalEdit: true,
      id: 'etj9p7q',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      image: false,
      privateDownload: false,
      imageSize: '200',
      filePattern: '*',
      fileMinSize: '0KB',
      fileMaxSize: '1GB',
      uploadOnly: false
    },
    message: 'Upload is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'file'
  }
]
      ✔ Should highlight modal button if component is invalid (626ms)
    Test basic component settings: calculateValue
      ✔ Should caclulate component value (632ms)
      ✔ Should not allow overriding component colculated value (464ms)
      ✔ Should allow overriding component calculated value (469ms)
    Test basic component settings: validate.required
[
  {
    component: {
      label: 'Text Field',
      tableView: true,
      key: 'textField',
      type: 'textfield',
      input: true,
      validate: [Object],
      id: 'ejsqwn',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  },
  {
    component: {
      label: 'Number',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'number',
      type: 'number',
      input: true,
      validate: [Object],
      id: 'elavd4e',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  },
  {
    component: {
      label: 'Password',
      tableView: false,
      key: 'password',
      type: 'password',
      input: true,
      protected: true,
      validate: [Object],
      id: 'eej3cso',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Password is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'password'
  },
  {
    component: {
      label: 'Checkbox',
      tableView: false,
      key: 'checkbox',
      type: 'checkbox',
      input: true,
      validate: [Object],
      id: 'elpkc49',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'Checkbox is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkbox'
  },
  {
    component: {
      label: 'Select Boxes',
      optionsLabelPosition: 'right',
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'selectBoxes',
      type: 'selectboxes',
      input: true,
      inputType: 'checkbox',
      id: 'emhd6ta',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      data: [Object],
      fieldSet: false,
      inline: false
    },
    message: 'Select Boxes is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectBoxes'
  },
  {
    component: {
      label: 'Select',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'select',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'e1kboz',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Select is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'select'
  },
  {
    component: {
      label: 'Radio',
      optionsLabelPosition: 'right',
      inline: false,
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'radio',
      type: 'radio',
      input: true,
      id: 'ea83q8p',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      inputType: 'radio',
      data: [Object],
      fieldSet: false
    },
    message: 'Radio is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'radio'
  },
  {
    component: {
      label: 'Email',
      tableView: true,
      key: 'email',
      type: 'email',
      input: true,
      validate: [Object],
      id: 'e1ku3xm',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'email',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      kickbox: [Object]
    },
    message: 'Email is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'email'
  },
  {
    component: {
      label: 'Url',
      tableView: true,
      key: 'url',
      type: 'url',
      input: true,
      validate: [Object],
      id: 'e731g5',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'url',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Url is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'url'
  },
  {
    component: {
      label: 'Phone Number',
      tableView: true,
      key: 'phoneNumber',
      type: 'phoneNumber',
      input: true,
      validate: [Object],
      id: 'ep0ffze',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'tel',
      inputFormat: 'plain',
      inputMask: '(999) 999-9999',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      inputMode: 'decimal'
    },
    message: 'Phone Number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'phoneNumber'
  },
  {
    component: {
      label: 'Tags',
      tableView: false,
      key: 'tags',
      type: 'tags',
      input: true,
      validate: [Object],
      id: 'egb70ak',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      delimeter: ',',
      storeas: 'string',
      maxTags: 0
    },
    message: 'Tags is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'tags'
  },
  {
    component: {
      label: 'Address',
      tableView: false,
      provider: 'nominatim',
      key: 'address',
      type: 'address',
      providerOptions: [Object],
      input: true,
      components: [Array],
      validate: [Object],
      id: 'epw5uid',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      switchToManualModeLabel: "Can't find address? Switch to manual mode.",
      manualModeViewString: '',
      disableClearIcon: false,
      enableManualMode: false
    },
    message: 'Address is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'address'
  },
  {
    component: {
      label: 'Date / Time',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTime',
      type: 'datetime',
      input: true,
      widget: [Object],
      validate: [Object],
      id: 'ef7c0xe',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'Date / Time is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTime'
  },
  {
    component: {
      label: 'Day',
      hideInputLabels: false,
      inputsLabelPosition: 'top',
      useLocaleSettings: false,
      tableView: false,
      fields: [Object],
      key: 'day',
      type: 'day',
      input: true,
      defaultValue: '00/00/0000',
      validate: [Object],
      id: 'eefk3ru',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dayFirst: false,
      maxYear: undefined,
      minYear: undefined
    },
    message: 'Day is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'day'
  },
  {
    component: {
      label: 'Time',
      tableView: true,
      key: 'time',
      type: 'time',
      input: true,
      inputMask: '99:99',
      validate: [Object],
      id: 'e0bmzdm',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'time',
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'Time is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'time'
  },
  {
    component: {
      label: 'Currency',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currency',
      type: 'currency',
      input: true,
      delimiter: true,
      validate: [Object],
      id: 'ej1mc7p',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Currency is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currency'
  },
  {
    component: {
      label: 'Survey',
      tableView: false,
      questions: [Array],
      values: [Array],
      key: 'survey',
      type: 'survey',
      input: true,
      validate: [Object],
      id: 'eemqqu',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Survey is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'survey'
  },
  {
    component: {
      label: 'Data Map',
      tableView: false,
      key: 'dataMap',
      type: 'datamap',
      input: true,
      valueComponent: [Object],
      validate: [Object],
      id: 'euksu3j',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      addAnother: 'Add Another',
      disableAddingRemovingRows: false,
      keyBeforeValue: true
    },
    message: 'Data Map is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataMap'
  },
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      rowDrafts: false,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      validate: [Object],
      id: 'ekfjzrj',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      modal: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Edit Grid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Upload',
      tableView: false,
      storage: 'base64',
      webcam: false,
      fileTypes: [Array],
      key: 'file',
      type: 'file',
      input: true,
      validate: [Object],
      id: 'erak27g',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      image: false,
      privateDownload: false,
      imageSize: '200',
      filePattern: '*',
      fileMinSize: '0KB',
      fileMaxSize: '1GB',
      uploadOnly: false
    },
    message: 'Upload is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'file'
  }
]
      ✔ Should show required validation error on submit and remove error if component has value (708ms)
[
  {
    component: {
      label: 'Text Field',
      tableView: true,
      key: 'textField',
      type: 'textfield',
      input: true,
      validate: [Object],
      id: 'ehmkhg',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'textField: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  },
  {
    component: {
      label: 'Number',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'number',
      type: 'number',
      input: true,
      validate: [Object],
      id: 'eq2e6mh',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'number: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  },
  {
    component: {
      label: 'Password',
      tableView: false,
      key: 'password',
      type: 'password',
      input: true,
      protected: true,
      validate: [Object],
      id: 'ewloxjh',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'password: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'password'
  },
  {
    component: {
      label: 'Checkbox',
      tableView: false,
      key: 'checkbox',
      type: 'checkbox',
      input: true,
      validate: [Object],
      id: 'e6baqu',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'checkbox: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkbox'
  },
  {
    component: {
      label: 'Select Boxes',
      optionsLabelPosition: 'right',
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'selectBoxes',
      type: 'selectboxes',
      input: true,
      inputType: 'checkbox',
      id: 'es6osk7',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      data: [Object],
      fieldSet: false,
      inline: false
    },
    message: 'selectBoxes: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectBoxes'
  },
  {
    component: {
      label: 'Select',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'select',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'ete7vtl',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'select: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'select'
  },
  {
    component: {
      label: 'Radio',
      optionsLabelPosition: 'right',
      inline: false,
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'radio',
      type: 'radio',
      input: true,
      id: 'ecutygv',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      inputType: 'radio',
      data: [Object],
      fieldSet: false
    },
    message: 'radio: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'radio'
  },
  {
    component: {
      label: 'Email',
      tableView: true,
      key: 'email',
      type: 'email',
      input: true,
      validate: [Object],
      id: 'er729e9',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'email',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      kickbox: [Object]
    },
    message: 'email: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'email'
  },
  {
    component: {
      label: 'Url',
      tableView: true,
      key: 'url',
      type: 'url',
      input: true,
      validate: [Object],
      id: 'ehfb9w4',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'url',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'url: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'url'
  },
  {
    component: {
      label: 'Phone Number',
      tableView: true,
      key: 'phoneNumber',
      type: 'phoneNumber',
      input: true,
      validate: [Object],
      id: 'ecl36u9',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'tel',
      inputFormat: 'plain',
      inputMask: '(999) 999-9999',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      inputMode: 'decimal'
    },
    message: 'phoneNumber: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'phoneNumber'
  },
  {
    component: {
      label: 'Tags',
      tableView: false,
      key: 'tags',
      type: 'tags',
      input: true,
      validate: [Object],
      id: 'e27c7is',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      delimeter: ',',
      storeas: 'string',
      maxTags: 0
    },
    message: 'tags: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'tags'
  },
  {
    component: {
      label: 'Address',
      tableView: false,
      provider: 'nominatim',
      key: 'address',
      type: 'address',
      providerOptions: [Object],
      input: true,
      components: [Array],
      validate: [Object],
      id: 'eemmke9',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      switchToManualModeLabel: "Can't find address? Switch to manual mode.",
      manualModeViewString: '',
      disableClearIcon: false,
      enableManualMode: false
    },
    message: 'address: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'address'
  },
  {
    component: {
      label: 'Date / Time',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTime',
      type: 'datetime',
      input: true,
      widget: [Object],
      validate: [Object],
      id: 'ezceom',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'dateTime: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTime'
  },
  {
    component: {
      label: 'Day',
      hideInputLabels: false,
      inputsLabelPosition: 'top',
      useLocaleSettings: false,
      tableView: false,
      fields: [Object],
      key: 'day',
      type: 'day',
      input: true,
      defaultValue: '00/00/0000',
      validate: [Object],
      id: 'ex1gko',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dayFirst: false,
      maxYear: undefined,
      minYear: undefined
    },
    message: 'day: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'day'
  },
  {
    component: {
      label: 'Time',
      tableView: true,
      key: 'time',
      type: 'time',
      input: true,
      inputMask: '99:99',
      validate: [Object],
      id: 'egjef5j',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'time',
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'time: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'time'
  },
  {
    component: {
      label: 'Currency',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currency',
      type: 'currency',
      input: true,
      delimiter: true,
      validate: [Object],
      id: 'es88d6b',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'currency: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currency'
  },
  {
    component: {
      label: 'Survey',
      tableView: false,
      questions: [Array],
      values: [Array],
      key: 'survey',
      type: 'survey',
      input: true,
      validate: [Object],
      id: 'e0alpc',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'survey: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'survey'
  },
  {
    component: {
      label: 'Data Map',
      tableView: false,
      key: 'dataMap',
      type: 'datamap',
      input: true,
      valueComponent: [Object],
      validate: [Object],
      id: 'ewxtmbc',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      addAnother: 'Add Another',
      disableAddingRemovingRows: false,
      keyBeforeValue: true
    },
    message: 'dataMap: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataMap'
  },
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      rowDrafts: false,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      validate: [Object],
      id: 'ee5r7k6',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      modal: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'editGrid: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Upload',
      tableView: false,
      storage: 'base64',
      webcam: false,
      fileTypes: [Array],
      key: 'file',
      type: 'file',
      input: true,
      validate: [Object],
      id: 'eu5dm1c',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      image: false,
      privateDownload: false,
      imageSize: '200',
      filePattern: '*',
      fileMinSize: '0KB',
      fileMaxSize: '1GB',
      uploadOnly: false
    },
    message: 'file: custom validation error',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'file'
  }
]
      ✔ Should show custom validation error if component is invalid (368ms)
[
  {
    component: {
      label: 'Text Field',
      tableView: true,
      key: 'textField',
      type: 'textfield',
      input: true,
      validate: [Object],
      id: 'ee1uewi',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Custom label for textField is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textField'
  },
  {
    component: {
      label: 'Number',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'number',
      type: 'number',
      input: true,
      validate: [Object],
      id: 'ep95sa',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Custom label for number is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'number'
  },
  {
    component: {
      label: 'Password',
      tableView: false,
      key: 'password',
      type: 'password',
      input: true,
      protected: true,
      validate: [Object],
      id: 'et3s1k',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Custom label for password is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'password'
  },
  {
    component: {
      label: 'Checkbox',
      tableView: false,
      key: 'checkbox',
      type: 'checkbox',
      input: true,
      validate: [Object],
      id: 'empd6',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'Custom label for checkbox is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkbox'
  },
  {
    component: {
      label: 'Select Boxes',
      optionsLabelPosition: 'right',
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'selectBoxes',
      type: 'selectboxes',
      input: true,
      inputType: 'checkbox',
      id: 'ero9b9',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      data: [Object],
      fieldSet: false,
      inline: false
    },
    message: 'Custom label for selectBoxes is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectBoxes'
  },
  {
    component: {
      label: 'Select',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'select',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'es79u08',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Custom label for select is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'select'
  },
  {
    component: {
      label: 'Radio',
      optionsLabelPosition: 'right',
      inline: false,
      tableView: false,
      values: [Array],
      validate: [Object],
      key: 'radio',
      type: 'radio',
      input: true,
      id: 'eyt1aa',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      inputType: 'radio',
      data: [Object],
      fieldSet: false
    },
    message: 'Custom label for radio is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'radio'
  },
  {
    component: {
      label: 'Email',
      tableView: true,
      key: 'email',
      type: 'email',
      input: true,
      validate: [Object],
      id: 'e41389f',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'email',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      kickbox: [Object]
    },
    message: 'Custom label for email is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'email'
  },
  {
    component: {
      label: 'Url',
      tableView: true,
      key: 'url',
      type: 'url',
      input: true,
      validate: [Object],
      id: 'ek9oi7',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'url',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Custom label for url is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'url'
  },
  {
    component: {
      label: 'Phone Number',
      tableView: true,
      key: 'phoneNumber',
      type: 'phoneNumber',
      input: true,
      validate: [Object],
      id: 'esidptq',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'tel',
      inputFormat: 'plain',
      inputMask: '(999) 999-9999',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      inputMode: 'decimal'
    },
    message: 'Custom label for phoneNumber is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'phoneNumber'
  },
  {
    component: {
      label: 'Tags',
      tableView: false,
      key: 'tags',
      type: 'tags',
      input: true,
      validate: [Object],
      id: 'emu8bg3',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      delimeter: ',',
      storeas: 'string',
      maxTags: 0
    },
    message: 'Custom label for tags is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'tags'
  },
  {
    component: {
      label: 'Address',
      tableView: false,
      provider: 'nominatim',
      key: 'address',
      type: 'address',
      providerOptions: [Object],
      input: true,
      components: [Array],
      validate: [Object],
      id: 'e2dx29i',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      switchToManualModeLabel: "Can't find address? Switch to manual mode.",
      manualModeViewString: '',
      disableClearIcon: false,
      enableManualMode: false
    },
    message: 'Custom label for address is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'address'
  },
  {
    component: {
      label: 'Date / Time',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTime',
      type: 'datetime',
      input: true,
      widget: [Object],
      validate: [Object],
      id: 'ee57gmv',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'Custom label for dateTime is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTime'
  },
  {
    component: {
      label: 'Day',
      hideInputLabels: false,
      inputsLabelPosition: 'top',
      useLocaleSettings: false,
      tableView: false,
      fields: [Object],
      key: 'day',
      type: 'day',
      input: true,
      defaultValue: '00/00/0000',
      validate: [Object],
      id: 'eh0dlkm',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dayFirst: false,
      maxYear: undefined,
      minYear: undefined
    },
    message: 'Custom label for day is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'day'
  },
  {
    component: {
      label: 'Time',
      tableView: true,
      key: 'time',
      type: 'time',
      input: true,
      inputMask: '99:99',
      validate: [Object],
      id: 'e8jwqvi',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'time',
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'Custom label for time is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'time'
  },
  {
    component: {
      label: 'Currency',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currency',
      type: 'currency',
      input: true,
      delimiter: true,
      validate: [Object],
      id: 'ezkwhzo',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Custom label for currency is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currency'
  },
  {
    component: {
      label: 'Survey',
      tableView: false,
      questions: [Array],
      values: [Array],
      key: 'survey',
      type: 'survey',
      input: true,
      validate: [Object],
      id: 'e0rjw1q',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Custom label for survey is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'survey'
  },
  {
    component: {
      label: 'Data Map',
      tableView: false,
      key: 'dataMap',
      type: 'datamap',
      input: true,
      valueComponent: [Object],
      validate: [Object],
      id: 'ep1d2zs',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      addAnother: 'Add Another',
      disableAddingRemovingRows: false,
      keyBeforeValue: true
    },
    message: 'Custom label for dataMap is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataMap'
  },
  {
    component: {
      label: 'Edit Grid',
      tableView: false,
      rowDrafts: false,
      key: 'editGrid',
      type: 'editgrid',
      input: true,
      components: [Array],
      validate: [Object],
      id: 'elz78du',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      tree: true,
      lazyLoad: false,
      disableAddingRemovingRows: false,
      removeRow: 'Cancel',
      defaultOpen: false,
      openWhenEmpty: false,
      modal: false,
      inlineEdit: false,
      templates: [Object]
    },
    message: 'Custom label for editGrid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'editGrid'
  },
  {
    component: {
      label: 'Upload',
      tableView: false,
      storage: 'base64',
      webcam: false,
      fileTypes: [Array],
      key: 'file',
      type: 'file',
      input: true,
      validate: [Object],
      id: 'et0jgh',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: 'Custom label for {{component.key}}',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      image: false,
      privateDownload: false,
      imageSize: '200',
      filePattern: '*',
      fileMinSize: '0KB',
      fileMaxSize: '1GB',
      uploadOnly: false
    },
    message: 'Custom label for file is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'file'
  }
]
      ✔ Should show custom validation label if component is invalid (358ms)
    Test basic component settings: validate.custom
      ✔ Should execute custom validation (1130ms)
    Test basic component settings: validate_nested_components
[
  {
    component: {
      label: 'Text Field Child',
      tableView: true,
      key: 'textFieldChild',
      type: 'textfield',
      input: true,
      shouldIncludeSubFormPath: true,
      id: 'eslp5v7',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Child is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.textFieldChild'
  },
  {
    component: {
      label: 'Time Child',
      inputType: 'text',
      tableView: true,
      key: 'timeChild',
      type: 'time',
      input: true,
      inputMask: '99:99',
      shouldIncludeSubFormPath: true,
      id: 'eh57jr7',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputFormat: 'plain',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      format: 'HH:mm',
      dataFormat: 'HH:mm:ss'
    },
    message: 'Time Child is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.timeChild'
  },
  {
    component: {
      label: 'Number Inside Child Panel',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberInsideChildPanel',
      type: 'number',
      input: true,
      shouldIncludeSubFormPath: true,
      id: 'ebm3ce8',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Inside Child Panel is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.numberInsideChildPanel'
  },
  {
    component: {
      label: 'Text Area Inside Child DataGrid',
      autoExpand: false,
      tableView: true,
      key: 'textAreaInsideChildDataGrid',
      type: 'textarea',
      input: true,
      id: 'enmt8la',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'html',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false,
      rows: 3,
      wysiwyg: false,
      editor: '',
      fixedSize: true
    },
    message: 'Text Area Inside Child DataGrid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'form.data.dataGridChild[0].textAreaInsideChildDataGrid'
  },
  {
    component: {
      label: 'Number Column',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberColumn',
      type: 'number',
      input: true,
      hideOnChildrenHidden: false,
      id: 'eungklm',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Column is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberColumn'
  },
  {
    component: {
      label: 'Text Field Column',
      tableView: true,
      key: 'textFieldColumn',
      type: 'textfield',
      input: true,
      hideOnChildrenHidden: false,
      id: 'eob1k42',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Column is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldColumn'
  },
  {
    component: {
      label: 'Number Fieldset',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberFieldset',
      type: 'number',
      input: true,
      id: 'ej57qi8',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Fieldset is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberFieldset'
  },
  {
    component: {
      label: 'Number Panel',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberPanel',
      type: 'number',
      input: true,
      id: 'e875253',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Panel is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberPanel'
  },
  {
    component: {
      label: 'Select Table',
      widget: 'choicesjs',
      tableView: true,
      data: [Object],
      selectThreshold: 0.3,
      validate: [Object],
      key: 'selectTable',
      type: 'select',
      indexeddb: [Object],
      input: true,
      id: 'eroipna',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      dataSrc: 'values',
      authenticate: false,
      ignoreCache: false,
      template: '<span>{{ item.label }}</span>',
      idPath: 'id',
      clearOnRefresh: false,
      limit: 100,
      valueProperty: '',
      lazyLoad: true,
      filter: '',
      searchEnabled: true,
      searchDebounce: 0.3,
      searchField: '',
      minSearch: 0,
      readOnlyValue: false,
      selectFields: '',
      uniqueOptions: false,
      fuseOptions: [Object],
      customOptions: {},
      useExactSearch: false
    },
    message: 'Select Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'selectTable'
  },
  {
    component: {
      label: 'Checkbox Table',
      tableView: false,
      key: 'checkboxTable',
      type: 'checkbox',
      input: true,
      defaultValue: false,
      id: 'etew2r',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: true,
      labelPosition: 'right',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: null,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      inputType: 'checkbox',
      value: '',
      name: ''
    },
    message: 'Checkbox Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'checkboxTable'
  },
  {
    component: {
      label: 'Date / Time Table',
      tableView: false,
      enableMinDateInput: false,
      datePicker: [Object],
      enableMaxDateInput: false,
      key: 'dateTimeTable',
      type: 'datetime',
      input: true,
      widget: [Object],
      id: 'ez3z75h',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: '',
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      format: 'yyyy-MM-dd hh:mm a',
      useLocaleSettings: false,
      allowInput: true,
      enableDate: true,
      enableTime: true,
      defaultDate: '',
      displayInTimezone: 'viewer',
      timezone: '',
      datepickerMode: 'day',
      timePicker: [Object],
      customOptions: {}
    },
    message: 'Date / Time Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dateTimeTable'
  },
  {
    component: {
      label: 'Currency Table',
      mask: false,
      spellcheck: true,
      tableView: false,
      currency: 'USD',
      inputFormat: 'plain',
      key: 'currencyTable',
      type: 'currency',
      input: true,
      delimiter: true,
      id: 'ejxd0z1l',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Currency Table is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'currencyTable'
  },
  {
    component: {
      label: 'Number Tab',
      mask: false,
      spellcheck: true,
      tableView: false,
      delimiter: false,
      requireDecimal: false,
      inputFormat: 'plain',
      key: 'numberTab',
      type: 'number',
      input: true,
      id: 'e05e12h',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: []
    },
    message: 'Number Tab is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'numberTab'
  },
  {
    component: {
      label: 'Text Field Tab',
      tableView: true,
      key: 'textFieldTab',
      type: 'textfield',
      input: true,
      id: 'e998rlp',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Tab is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldTab'
  },
  {
    component: {
      label: 'Text Field Well',
      tableView: true,
      key: 'textFieldWell',
      type: 'textfield',
      input: true,
      id: 'epnipn6',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Well is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'textFieldWell'
  },
  {
    component: {
      label: 'Text Field Container',
      tableView: true,
      key: 'textFieldContainer',
      type: 'textfield',
      input: true,
      id: 'eaw2pdb',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field Container is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'container.textFieldContainer'
  },
  {
    component: {
      label: 'Text Field DataGrid',
      tableView: true,
      key: 'textFieldDataGrid',
      type: 'textfield',
      input: true,
      id: 'ewz3im',
      placeholder: '',
      prefix: '',
      customClass: '',
      suffix: '',
      multiple: false,
      defaultValue: null,
      protected: false,
      unique: false,
      persistent: true,
      hidden: false,
      clearOnHide: true,
      refreshOn: '',
      redrawOn: '',
      modalEdit: false,
      dataGridLabel: false,
      labelPosition: 'top',
      description: '',
      errorLabel: '',
      tooltip: '',
      hideLabel: false,
      tabindex: '',
      disabled: false,
      autofocus: false,
      dbIndex: false,
      customDefaultValue: '',
      calculateValue: '',
      calculateServer: false,
      widget: [Object],
      attributes: {},
      validateOn: 'change',
      validate: [Object],
      conditional: [Object],
      overlay: [Object],
      allowCalculateOverride: false,
      encrypted: false,
      showCharCount: false,
      showWordCount: false,
      properties: {},
      allowMultipleMasks: false,
      addons: [],
      mask: false,
      inputType: 'text',
      inputFormat: 'plain',
      inputMask: '',
      displayMask: '',
      spellcheck: true,
      truncateMultipleSpaces: false
    },
    message: 'Text Field DataGrid is required',
    messages: [ [Object] ],
    external: false,
    formattedKeyOrPath: 'dataGrid[0].textFieldDataGrid'
  }
]
      ✔ Should show validation errors for nested components (1430ms)
    Test basic component settings: conditional
      ✔ Should show component if simple condition is met and hide it if simple condition is not fulfilled (666ms)
    Test basic component settings: customConditional
      ✔ Should show component if custom condition is met and hide it if custom condition is not fulfilled (659ms)
    Test basic component settings: logic
      ✔ Should execute value/property/merge schema/custom actions if simple logic condition is met (2295ms)
      ✔ Should execute value action if js logic condition is met (744ms)
      ✔ Should execute property action if json logic condition is met (741ms)
      ✔ Should execute property action if logic event is emitted (250ms)
    Test basic component settings: set_get_value
      ✔ Should set and get components` value (including string value) (477ms)
      ✔ Should set and get submission (284ms)

  WebformBuilder tests
    ✔ Should create a new form builder class
    ✔ Should execute form controller (517ms)
    ✔ Should not show unique API error when components with same keys are inside and outside of the Data component
    ✔ Should show unique API error when components inside and outside of the Layout component have same keys
    ✔ Should not overwrite existing resource key in camelCase (40ms)
    ✔ Should show unique API error when layout components have same keys
    ✔ Should allow add components (628ms)
    ✔ Should show unique API error when components on the same level have same keys
    ✔ Should uniquify API keys when add a component to the container which already has the same type component (3002ms)
    ✔ Should override the way a key for new component is set (961ms)
    ✔ Should add submit button after switching from wizard form (137ms)
    ✔ Should keep min/max date validation settings with moment.js function (892ms)
    ✔ Should remove deleted components keys from default value (2082ms)

  Wizard tests
    ✔ Should recalculate values for components with "allow override" after wizard is canceled (1333ms)
    ✔ Should execute form controller (306ms)
    ✔ Should check correctly Permissions and disabled sumbit button
    ✔ Should correctly reset values (1290ms)
    ✔ Should render nested wizard, navigate pages and trigger validation (2268ms)
    ✔ Should set submission in wizard with nested wizard (620ms)
    ✔ Should show conditional page inside nested wizard (2551ms)
    ✔ Should render values in HTML render mode (633ms)
    ✔ Should render values for prefix Components (425ms)
    ✔ Should redirect to the correct page from the Error list (936ms)
    ✔ Should execute advanced logic for wizard pages (440ms)
    ✔ Should navigate next page according to advanced next page logic (636ms)
    ✔ Should NOT navigate to next page if it contains invalid nested component (226ms)
    ✔ Should not render breadcrumb if it has hidden type (334ms)
    ✔ Should not navigate between wizard pages on breadcrumb click if breadcrumbClickable is false (530ms)
    ✔ Should set/get wizard submission (327ms)
    ✔ Should correctly render customized wizard and navigate using custom btns (822ms)
    ✔ Should not create a new submission on submission of edited draft submission (1031ms)
    ✔ Should show validation alert and components` errors and navigate pages after clicking alert error (2652ms)
    ✔ Should navigate wizard pages using navigation buttons and breadcrumbs (480ms)
    ✔ Should stay on current page when changing language (100ms)
    ✔ Should correctly set values in HTML render mode (463ms)
    ✔ Should show tooltip for wizard pages (335ms)
    ✔ Should not clear wizard data when navigating between wizard pages with hidden panel (577ms)
    ✔ Should show signature submission in HTML render mode (231ms)
    ✔ Should display conditional page after setting submission (711ms)
    ✔ Should display submission data on page with custom conditional logic in readOnly (1024ms)
    ✔ Should show conditional wizard page (532ms)
    ✔ Should show first conditional wizard page (315ms)
    ✔ Should display editGrid submission data in readOnly mode (422ms)
Expected error when executing submit in errors test
    ✔ Should set components errors if they are after page was changed with navigation (240ms)
    ✔ Should leave errors for invalid fields after validation on next button and entering valid data in one of the fields (526ms)
    ✔ Should not set components errors if in readOnly mode
    ✔ Should keep values during validation that are conditionally visible
    ✔ If allowPrevious is given, the breadcrumb bar should be clickable for visited tabs. (208ms)
    ✔ Should scroll to the top of the page when the page is changed (384ms)
    ✔ Should show the actual page after re-rendering due to nested wizards. (43ms)
    ✔ Should have proper values for localRoot (411ms)
    ✔ Should keep wizard pages separate from edit grid inner wizard pages (422ms)
    ✔ Should navigate wizard pages and submit form using 'Save on Enter' option (177ms)
    ✔ Should proper validate nested wizard fields (830ms)
    Conditional pages
      ✔ Should remove page from header when it is hidden (322ms)
      ✔  (2231ms)

  WizardBuilder tests
    ✔ Test page remove with cancellation (841ms)
    ✔ Test page remove with confirmation (888ms)
    ✔ Test page remove with confirmation when remove from component settings window (1301ms)
    ✔ Should execute form controller (540ms)
    ✔ Test pages reorder (545ms)


  1194 passing (4m)

